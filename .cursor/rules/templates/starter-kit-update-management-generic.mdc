# 🔄 **Cursor Rules Starter-Kit 継続的アップデート管理ルール（汎用テンプレート）**

**Version**: 1.0.0  
**Created**: 2025-07-22  
**Purpose**: プロジェクト知見の継続的蓄積と starter-kit の進化管理（汎用版）  
**Priority**: 最高（失敗防止・運用標準化）  
**Repository**: https://github.com/machine-dev/cursor-rules-starter-kit.git  
**Template**: このファイルは汎用テンプレートです。プロジェクト固有にカスタマイズして使用してください。

## 🔧 **カスタマイズポイント**

### **必須置換項目**
```yaml
project_specific_customization:
  - "[PROJECT_NAME]": 実際のプロジェクト名に置換
  - "[DOMAIN_SPECIFIC]": プロジェクトドメイン（AI/LLM、E-commerce、Mobile等）
  - "[TECH_STACK]": 使用技術スタック（Next.js、React、Vue、Angular等）
  - "[REPOSITORY_URL]": プロジェクト固有リポジトリURL
  
optional_customization:
  - 指示パターンの追加・修正
  - プロジェクト固有安全性チェック項目
  - 独自の品質指標・効果測定項目
  - エスカレーション体制・サポート体制
```

---

## 🚨 **絶対遵守：開発中プロジェクト保護ルール**

### **❌ 絶対禁止事項**
```yaml
NEVER_DO:
  existing_project_file_modification:
    - "開発中プロジェクトの既存.mdcファイル直接書き換え"
    - "開発中プロジェクトの core/配下ファイル変更"
    - "開発中プロジェクトの requirements/配下ファイル変更"
    - "[PROJECT_NAME] 固有設定ファイルの上書き"
    
  destructive_operations:
    - "プロジェクト固有設定の上書き"
    - "開発履歴・進捗情報の破壊"
    - "実装中機能への影響操作"
    - "[DOMAIN_SPECIFIC] 固有実装の破壊"

failure_prevention_principle:
  rule: "開発中プロジェクトでは WRITE ONLY、NEVER OVERWRITE"
  action: "常に新規ファイル作成、既存ファイル保護"
  project_context: "[PROJECT_NAME] の開発継続性を最優先"
```

### **✅ 必須実行事項**
```yaml
ALWAYS_DO:
  safe_creation_pattern:
    - "新規ルール → .cursor/rules/templates/ 配下に作成"
    - "汎用化テンプレート → 明示的に generic.mdc 接尾辞"
    - "[PROJECT_NAME] 固有設定 → 絶対に変更しない"
    
  verification_steps:
    - "操作前：影響範囲確認 → 既存ファイル保護"
    - "操作中：新規作成確認 → 書き換え操作回避"
    - "操作後：[PROJECT_NAME] 開発継続性確認 → プロジェクト動作確認"
```

---

## 🔄 **継続的知見蓄積・starter-kit進化フロー**

### **Phase 1: プロジェクト開発サイクル**
```yaml
project_development_cycle:
  step_1_project_start:
    action: "新しい[PROJECT_NAME]プロジェクト開始"
    command: "git clone https://github.com/machine-dev/cursor-rules-starter-kit.git"
    verification: "最新[DOMAIN_SPECIFIC]テンプレート・ルールの取得確認"
    
  step_2_project_development:
    action: "[PROJECT_NAME]プロジェクト開発進行"
    focus: "[DOMAIN_SPECIFIC]固有要件・[TECH_STACK]技術課題の解決"
    learning: "新しい[DOMAIN_SPECIFIC]知見・パターン・ベストプラクティスの蓄積"
    
  step_3_knowledge_extraction:
    action: "[PROJECT_NAME]プロジェクト内で新しいルール作成"
    location: "[PROJECT_NAME]/.cursor/rules/templates/"
    naming: "[rule-name]-generic.mdc (汎用化準備)"
    content: "[PROJECT_NAME]固有情報を抽象化・テンプレート化"
    
  step_4_generalization:
    action: "[PROJECT_NAME]で作られたルールを汎用化"
    process: "[DOMAIN_SPECIFIC]具体的実装 → 汎用的パターン → 再利用可能テンプレート"
    validation: "他[DOMAIN_SPECIFIC]プロジェクト適用可能性確認"
    
  step_5_template_placement:
    action: "./templates配下に汎用化版配置"
    location: "[PROJECT_NAME]/.cursor/rules/templates/"
    safety_check: "既存ファイル上書き防止確認"
    
  step_6_starter_kit_update:
    action: "starter-kit にコミット・プッシュしてバージョンアップ"
    process: "[PROJECT_NAME] → starter-kit へのコピー・統合"
    repository: "https://github.com/machine-dev/cursor-rules-starter-kit.git"
```

### **Phase 2: 次プロジェクトサイクル**
```yaml
next_project_cycle:
  step_1_enhanced_start:
    action: "新しい[DOMAIN_SPECIFIC]プロジェクト開始（強化版）"
    command: "git clone https://github.com/machine-dev/cursor-rules-starter-kit.git"
    benefit: "前[PROJECT_NAME]プロジェクト知見の即座活用"
    
  continuous_improvement:
    pattern: "[DOMAIN_SPECIFIC]開発 → 知見抽出 → 汎用化 → 蓄積 → 次プロジェクト活用"
    effect: "[DOMAIN_SPECIFIC]プロジェクト毎の開発効率・品質向上"
    scaling: "[DOMAIN_SPECIFIC]知見の指数的蓄積・再利用"
```

---

## 📋 **starter-kit アップデート必須チェックリスト**

### **🚨 安全性チェック（必須）**
```yaml
safety_verification:
  existing_project_protection:
    - [ ] 開発中[PROJECT_NAME]プロジェクトファイルの変更ゼロ確認
    - [ ] 既存 .mdc ファイルの上書き回避確認
    - [ ] [PROJECT_NAME]固有設定の保護確認
    - [ ] [PROJECT_NAME]開発継続性への影響ゼロ確認
    
  template_creation_safety:
    - [ ] 新規ファイル作成のみ実行
    - [ ] generic.mdc 接尾辞での明示的汎用化
    - [ ] [PROJECT_NAME]固有情報の完全抽象化
    - [ ] [DOMAIN_SPECIFIC]テンプレート利用時のカスタマイズ余地確保
```

### **🎯 品質チェック（必須）**
```yaml
quality_verification:
  template_completeness:
    - [ ] 汎用性：複数[DOMAIN_SPECIFIC]プロジェクト種別で利用可能
    - [ ] 拡張性：[PROJECT_NAME]成長に対応可能
    - [ ] 保守性：理解・修正・改善が容易
    - [ ] 文書化：[DOMAIN_SPECIFIC]使用方法・カスタマイズ手順明記
    
  knowledge_extraction_quality:
    - [ ] 抽象化度：[PROJECT_NAME]具体的実装→汎用的パターン変換
    - [ ] 再利用性：他[DOMAIN_SPECIFIC]プロジェクトでの適用可能性
    - [ ] 学習効果：[DOMAIN_SPECIFIC]ベストプラクティス・知見の明文化
    - [ ] 継続改善：[PROJECT_NAME]フィードバック収集・改善機会特定
```

---

## 🛠️ **実装ガイド・運用手順**

### **新規ルール作成時の必須手順**
```bash
# ✅ 安全な新規ルール作成手順

# Step 1: 開発中[PROJECT_NAME]プロジェクト保護確認
echo "現在のプロジェクト: $(pwd)"
echo "WARNING: [PROJECT_NAME] 既存ファイル変更禁止"

# Step 2: 新規汎用テンプレート作成
mkdir -p .cursor/rules/templates/
touch .cursor/rules/templates/[new-rule-name]-generic.mdc

# Step 3: [PROJECT_NAME]プロジェクト知見の汎用化記述
cat > .cursor/rules/templates/[new-rule-name]-generic.mdc << 'EOF'
---
alwaysApply: false
template: true
---

# 📋 [RULE_NAME] 汎用テンプレート

**Version**: 1.0.0
**Purpose**: [[PROJECT_NAME]知見からの抽象化内容]
**Template**: このファイルは汎用テンプレートです。プロジェクト固有にカスタマイズして使用してください。

## 🔧 カスタマイズポイント
[プロジェクト固有に置換すべき箇所]

## 📝 使用方法
[テンプレート利用・カスタマイズ手順]
EOF

# Step 4: 汎用性・安全性確認
echo "[PROJECT_NAME]汎用テンプレート作成完了"
echo "[PROJECT_NAME]固有情報の抽象化確認"
echo "他[DOMAIN_SPECIFIC]プロジェクト適用可能性確認"
```

### **starter-kit への安全な統合手順**
```bash
# ✅ 安全な starter-kit 更新手順

# Step 1: starter-kit リポジトリ準備
cd /path/to/cursor-rules-starter-kit
git pull origin master

# Step 2: [PROJECT_NAME]から汎用テンプレートコピー
cp /path/to/[PROJECT_NAME]/.cursor/rules/templates/*-generic.mdc \
   .cursor/rules/templates/

# Step 3: 統合チェック実行
./scripts/validate-structure.sh
./scripts/generate-report.sh

# Step 4: 安全なコミット・プッシュ
git add .cursor/rules/templates/
git commit -m "feat: [PROJECT_NAME]知見の汎用テンプレート追加

- [具体的な追加内容]
- [期待される効果]
- [対応[DOMAIN_SPECIFIC]プロジェクト種別]"

git push origin master
```

---

## 📊 **継続的改善・効果測定**

### **知見蓄積効果指標**
```yaml
accumulation_metrics:
  template_growth:
    metric: "[DOMAIN_SPECIFIC]テンプレート数の増加"
    target: "[PROJECT_NAME]毎に1-3個の新規テンプレート"
    measurement: "templates/ ディレクトリファイル数追跡"
    
  reusability_score:
    metric: "[DOMAIN_SPECIFIC]テンプレート再利用率"
    target: "> 80% の新規[DOMAIN_SPECIFIC]プロジェクトで既存テンプレート活用"
    measurement: "[DOMAIN_SPECIFIC]プロジェクト初期化時のテンプレート利用状況"
    
  development_efficiency:
    metric: "[DOMAIN_SPECIFIC]プロジェクト立ち上げ時間短縮"
    target: "前[PROJECT_NAME]比 30% 以上の時間短縮"
    measurement: "[DOMAIN_SPECIFIC]初期設定完了までの時間計測"
    
  knowledge_quality:
    metric: "[DOMAIN_SPECIFIC]抽象化・汎用化品質"
    target: "95% 以上のテンプレートが複数[DOMAIN_SPECIFIC]プロジェクトで利用可能"
    measurement: "[DOMAIN_SPECIFIC]テンプレート利用プロジェクト数追跡"
```

---

## 🔗 **関連ルール・システム統合**

### **mdc-metadata-manager.mdc との連携**
```yaml
metadata_manager_integration:
  reference_control:
    - "[PROJECT_NAME] starter-kit 更新時の動的参照システム更新"
    - "[DOMAIN_SPECIFIC] 新規テンプレート追加時の参照ルール自動調整"
    - "[PROJECT_NAME] 種別拡張時の指示パターン追加"
    
  consistency_maintenance:
    - "[PROJECT_NAME] 既存参照制御との整合性保証"
    - "[DOMAIN_SPECIFIC] テンプレート間の依存関係管理"
    - "[PROJECT_NAME] バージョン互換性確保"
```

---

## 🎯 **期待される効果・成果**

### **✅ 短期効果（1-2週間）**
- 開発中[PROJECT_NAME]プロジェクトファイル破壊の完全防止
- 安全な[DOMAIN_SPECIFIC]知見蓄積プロセスの確立
- [PROJECT_NAME] starter-kit 更新フローの標準化

### **✅ 中期効果（1-3ヶ月）**
- [DOMAIN_SPECIFIC]プロジェクト間での知見共有・再利用促進
- [DOMAIN_SPECIFIC]開発立ち上げ時間の大幅短縮
- [DOMAIN_SPECIFIC]テンプレート品質・汎用性の向上

### **✅ 長期効果（3ヶ月以上）**
- [DOMAIN_SPECIFIC]組織全体の開発効率・品質向上
- [DOMAIN_SPECIFIC]知見の指数的蓄積・活用エコシステム確立
- [DOMAIN_SPECIFIC]継続的な開発プロセス改善・進化

---

## 📝 **テンプレート使用方法**

### **Step 1: プロジェクト固有ファイル名に変更**
```bash
cp starter-kit-update-management-generic.mdc starter-kit-update-management.mdc
```

### **Step 2: プロジェクト固有内容に置換**
```bash
# プロジェクト名の置換
sed -i 's/\[PROJECT_NAME\]/your-project-name/g' starter-kit-update-management.mdc

# ドメイン固有技術の置換
sed -i 's/\[DOMAIN_SPECIFIC\]/your-domain/g' starter-kit-update-management.mdc

# 技術スタックの置換
sed -i 's/\[TECH_STACK\]/your-tech-stack/g' starter-kit-update-management.mdc

# リポジトリURLの置換
sed -i 's|https://github.com/machine-dev/cursor-rules-starter-kit.git|your-starter-kit-repo-url|g' starter-kit-update-management.mdc
```

### **Step 3: プロジェクト固有カスタマイズ**
```bash
# プロジェクト固有の指示パターン追加
# 独自の安全性チェック項目追加
# 特有の品質指標・効果測定項目追加
# カスタムエスカレーション体制設定
```

---

**🎯 重要**: このテンプレートは汎用版です。必ずプロジェクト固有の内容にカスタマイズしてから使用してください。カスタマイズ後は、プロジェクトの成長に応じて継続的に更新・進化させるリビングドキュメントとして管理してください。

**🔄 カスタマイズ例**:
- AI/LLM Project: "[DOMAIN_SPECIFIC]" → "AI/LLM", "[TECH_STACK]" → "Next.js + OpenAI"
- E-commerce Project: "[DOMAIN_SPECIFIC]" → "E-commerce", "[TECH_STACK]" → "React + Stripe"
- Mobile Project: "[DOMAIN_SPECIFIC]" → "Mobile", "[TECH_STACK]" → "React Native + Firebase"
description:
globs:
alwaysApply: false
---
