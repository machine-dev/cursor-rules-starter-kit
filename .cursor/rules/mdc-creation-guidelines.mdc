
# 📝 .mdcファイル作成ガイドライン - 動的参照システム対応版

**策定日**: 2025年7月20日  
**適用範囲**: 全ての.mdcファイル作成・更新作業  
**参照必須**: .mdcファイル作成前に必ず本ガイドラインを確認  
**統制システム**: mdc-metadata-manager.mdc（エントリーポイント）

## 🎯 このガイドラインの目的

### 動的参照システムでの品質統一
- **.mdcファイルの構造標準化**: エントリーポイント統制下での一貫した形式
- **参照効率の最適化**: 適切なalwaysApply設定による効率的参照
- **スケーラブルな品質管理**: 新規ルール追加に対応した品質保証

### エントリーポイント統合での開発効率向上
- **統制された作成プロセス**: mdc-metadata-manager.mdcとの連携
- **再利用性の確保**: 動的参照システムでの活用促進
- **学習コストの削減**: 一元化された管理による理解促進

---

## 📋 動的参照システム対応のfrontmatter構造

### 必須Frontmatter構造（拡張版）
```yaml
---
description: [このルールが何を定義するかを1行で明確に記述 - 80文字以内推奨]
globs: ["対象ファイルパターン1", "対象ファイルパターン2"]
alwaysApply: [true/false - エントリーポイント基準に従った設定]
---
```

#### Frontmatterフィールド詳細（動的参照システム対応）

##### 1. description（必須・強化版）
```yaml
# ✅ 動的参照システムでの良い例
description: 依存関係ファイル（package.json/package-lock.json）の混入を防ぎ、機能別ブランチの純粋性を確保するワークフロー
description: Generative BIプロジェクトの概要、目標、技術スタック、制約条件を定義し、プロジェクト全体の基盤情報を提供
description: .mdcファイル作成時に参照すべき包括的なガイドライン、品質基準、プロセスを定義（動的参照システム対応版）

# ❌ 悪い例
description: ルール
description: 開発に関するルール
description: これはプロジェクトで使用するルールファイルです（冗長）
```

**記述基準（強化版）**:
- **1行で完結**: 80文字以内厳守
- **具体的な機能**: 何のためのルールかが即座に理解可能
- **動作指向**: 「〜を防ぐ」「〜を確保する」「〜を定義する」等の目的を含む
- **システム統合**: 必要に応じて動的参照システムとの関係を明記

##### 2. globs（必須・最適化版）
```yaml
# ✅ エントリーポイント・核心ルール（広範囲適用）
globs: ["*"]

# ✅ 特定技術・言語固有
globs: ["*.ts", "*.tsx", "*.js", "*.jsx"]
globs: ["package.json", "package-lock.json", "yarn.lock"]

# ✅ 特定ディレクトリ・ファイルパターン
globs: ["app/**/*", "components/**/*"]
globs: ["*.mdc", "*.md"]

# ❌ 避けるべき設定
globs: []  # 適用対象が不明
globs: ["**/*", "*", "*.mdc"]  # 重複・冗長
```

**設定基準（最適化版）**:
- **具体的パターン**: 対象を明確に特定
- **最小必要範囲**: 過度に広範囲に設定しない
- **パフォーマンス考慮**: 動的参照システムの効率を重視
- **保守性重視**: 将来の変更に対応しやすい形で設定

##### 3. alwaysApply（必須・統制版）
```yaml
# エントリーポイント管理システムに従った設定
# mdc-metadata-manager.mdcの基準を参照して決定

# 常時参照（alwaysApply: true）
alwaysApply: true

# 動的参照（alwaysApply: false）  
alwaysApply: false
```

**設定基準（エントリーポイント統制版）**:
- **エントリーポイント基準**: mdc-metadata-manager.mdcの分類に従う
- **true**: セキュリティ、品質、プロジェクト基盤、メタルール管理
- **false**: 特定作業時、プロジェクト段階依存、条件付き参照
- **統制確認**: 設定変更時はエントリーポイントファイルを更新

---

## 📖 動的参照システム対応の本文構造標準

### 1. エントリーポイント統制下のタイトル階層
```markdown
# メインタイトル（ルール名） - [動的参照システム対応版]

## 🎯 [システム内での位置付け]（推奨セクション）
### このルールの役割
### エントリーポイントとの関係

## 🚨 背景と重要性（必須セクション）
### 発生した問題
### このルールが解決する問題

## 📋 Phase 1: [具体的フェーズ名]
### 1.1 [具体的手順名]
### 1.2 [具体的手順名]

## 🔧 Phase 2: [具体的フェーズ名]
### 2.1 [具体的手順名]

## 🛠️ トラブルシューティング（推奨セクション）
### 4.1 [問題パターン1]の場合
### 4.2 [問題パターン2]の場合

## ✅ チェックリスト（推奨セクション）
### [段階1]
### [段階2]

## 🎯 期待される効果（必須セクション）

## 🔗 関連ルール・エントリーポイント統合（必須セクション）
### エントリーポイントとの関係
### 他ルールとの連携
```

### 2. 動的参照システム対応の絵文字使用標準
| 用途 | 絵文字 | 使用場面 | 動的参照システムでの意味 |
|------|--------|----------|--------------------------|
| **システム・統制** | 🎯 | エントリーポイント関連 | システム内位置付け |
| **重要・警告** | 🚨 | 背景、重要な注意事項 | 必須理解事項 |
| **手順・プロセス** | 📋 🔧 🛠️ | 各Phase、トラブルシューティング | 段階的実行 |
| **確認・検証** | ✅ ❌ ⚠️ | チェックリスト、例示 | 品質保証 |
| **統合・連携** | 🔗 | 関連ルール、エントリーポイント | システム統合 |
| **効果・目標** | 🎯 | 効果、目標 | システム貢献 |
| **参照・関連** | 📚 | 外部参照 | 知識体系 |

### 3. エントリーポイント統合のコードブロック標準
```markdown
#### エントリーポイント確認コマンド
```bash
# エントリーポイントの確認
code .cursor/rules/mdc-metadata-manager.mdc

# 本ルールの位置付け確認
grep -A5 -B5 "[このファイル名]" .cursor/rules/mdc-metadata-manager.mdc
```

#### 実行可能コマンド（動的参照システム対応）
```bash
# コメント: エントリーポイント経由での実行を明記
# 前提: mdc-metadata-manager.mdcで参照関係を確認済み

git status --porcelain

# 条件分岐がある場合は参照ルールを明記
if [ -n "$DEPENDENCY_FILES" ]; then
  echo "❌ エラー: dependency-separation-workflow.mdcを参照"
fi
```

#### 設定例・テンプレート（統制版）
```yaml
# エントリーポイント統制下での設定例
# 参照: mdc-metadata-manager.mdc
entry_point_control: true
dynamic_reference: 
  level: "conditional"
  triggers: ["specific_task", "project_phase"]
```
```

---

## 🏗️ エントリーポイント統制下の作成プロセス

### Phase 1: エントリーポイント確認・要件分析
```markdown
### 1.1 エントリーポイント統制確認
- [ ] mdc-metadata-manager.mdcで現在のシステム構造確認
- [ ] 新規ルールの位置付け・役割の明確化
- [ ] 既存ルールとの重複・競合チェック

### 1.2 動的参照レベル決定
- [ ] alwaysApply: true（常時参照）の必要性判定
- [ ] 動的参照の適用条件・トリガーの特定
- [ ] 参照効率への影響評価

### 1.3 システム統合要件分析
- [ ] エントリーポイントからの参照パス設計
- [ ] 他ルールとの連携関係定義
- [ ] 全体システムでの一貫性確保
```

### Phase 2: 構造設計（統制版）
```markdown
### 2.1 Frontmatter設計（エントリーポイント準拠）
- [ ] description: システム内での役割を明確に記述
- [ ] globs: 動的参照効率を考慮した最適範囲設定
- [ ] alwaysApply: エントリーポイント基準に従った適切設定

### 2.2 本文構造設計（統合版）
- [ ] エントリーポイントとの関係性説明セクション追加
- [ ] 動的参照トリガー条件の明記
- [ ] 他ルールとの連携方法の記述

### 2.3 システム統合品質基準確認
- [ ] エントリーポイント経由での参照可能性
- [ ] 動的参照システムでの効率性
- [ ] 全体システムでの整合性
```

### Phase 3: 実装・統制システム更新
```markdown
### 3.1 ルールファイル作成実装
- [ ] 構造標準に従った実装
- [ ] エントリーポイント統制の明記
- [ ] 動的参照トリガーの適切な設定

### 3.2 システム統合更新
- [ ] mdc-metadata-manager.mdcへの新規ルール情報追加
- [ ] 参照マトリックスの更新
- [ ] mdc-file-storage-rules.mdの構造図更新

### 3.3 統合動作確認・検証
- [ ] エントリーポイント経由での参照動作確認
- [ ] 動的参照トリガーの正常動作確認
- [ ] 他ルールとの競合・矛盾チェック
```

---

## ⭐ 動的参照システム対応品質基準

### 📋 エントリーポイント統制下の内容品質基準

#### 必須要件（統制版）
- [ ] **エントリーポイント統合**: mdc-metadata-manager.mdcとの連携確保
- [ ] **参照効率性**: 動的参照システムでの最適なパフォーマンス
- [ ] **システム整合性**: 全体ルールシステムとの矛盾がない
- [ ] **実用性**: 実際の問題解決に直結する内容
- [ ] **具体性**: 抽象的でなく具体的な手順・例示
- [ ] **完全性**: 実行に必要な情報が全て含まれている
- [ ] **正確性**: 技術的に正しく、実行可能な内容

#### 推奨要件（統合版）
- [ ] **動的参照最適化**: 適切な参照トリガー設定
- [ ] **段階性**: 複雑な内容を段階的に分解
- [ ] **例示性**: 動的参照システム対応の良い例・悪い例
- [ ] **連携性**: 他ルールとの効果的な連携方法
- [ ] **更新性**: システム変更に対応しやすい構造

### 📝 動的参照システム対応の記述品質基準

#### 文章表現（統制版）
- [ ] **システム統合明確性**: エントリーポイントとの関係が理解しやすい
- [ ] **動的参照簡潔性**: 参照条件が冗長でなく要点を押さえている
- [ ] **一貫性**: システム全体での用語・表現の統一
- [ ] **効率性**: 動的参照での読みやすさを重視

#### 構造・形式（統合版）
- [ ] **エントリーポイント階層性**: 統制システムに適合したヘッダー階層
- [ ] **動的参照視覚性**: 参照関係が分かりやすい図表・リスト
- [ ] **システム検索性**: エントリーポイント経由での発見しやすさ
- [ ] **拡張性**: システム変更に対応しやすい構造

---

## 📚 エントリーポイント統制対応テンプレート集

### 1. 常時参照ルール用テンプレート（alwaysApply: true）
```markdown
---
description: [システム基盤・品質・セキュリティに関わる機能を1行で記述]
globs: ["*"]
alwaysApply: true
---

# [ルール名] - エントリーポイント統制版

## 🎯 システム内での位置付け

### このルールの役割
- **エントリーポイントとの関係**: mdc-metadata-manager.mdcから常時参照
- **システム内重要度**: CRITICAL - 必須適用
- **参照タイミング**: [具体的な参照タイミング]

## 🚨 背景と重要性

### 発生した問題
- [具体的な問題1]
- [具体的な問題2]

### このルールが解決する問題
- **[解決ポイント1]**: [詳細説明]
- **[解決ポイント2]**: [詳細説明]

## 📋 Phase 1: [フェーズ名]

### 1.1 [手順名]
```bash
# エントリーポイント確認済み前提での実行
command example
```

## ✅ チェックリスト

### [段階名]
- [ ] エントリーポイント統制下での実行確認
- [ ] [確認項目1]
- [ ] [確認項目2]

## 🎯 期待される効果
- ✅ **[効果1]**: [詳細]
- ✅ **[効果2]**: [詳細]
- ✅ **システム統合効果**: 動的参照システム全体の安定性向上

## 🔗 関連ルール・エントリーポイント統合

### エントリーポイントとの関係
- **参照制御**: mdc-metadata-manager.mdc → 本ルール（常時参照）
- **更新連動**: 本ルール変更時のエントリーポイント更新必須

### 他ルールとの連携
- [関連ルール1]: [連携内容]
- [関連ルール2]: [連携内容]
```

### 2. 動的参照ルール用テンプレート（alwaysApply: false）
```markdown
---
description: [特定作業・条件での機能を1行で記述]
globs: ["対象ファイルパターン"]
alwaysApply: false
---

# [ルール名] - 動的参照対応版

## 🎯 システム内での位置付け

### このルールの役割
- **参照トリガー**: [具体的な参照条件・タイミング]
- **エントリーポイント経由**: mdc-metadata-manager.mdcからの動的参照
- **適用範囲**: [特定作業・フェーズ・条件]

## 🚨 背景と重要性

### このルールが必要となる状況
- **トリガー条件1**: [具体的状況]
- **トリガー条件2**: [具体的状況]

### 動的参照による効果
- **効率化**: 必要時のみの参照による最適化
- **特化対応**: [特定領域での深い対応]

## 📋 実行プロセス

### エントリーポイント確認
```bash
# 1. エントリーポイントでの参照確認
code .cursor/rules/mdc-metadata-manager.mdc

# 2. 本ルールの適用条件確認
# [具体的な確認コマンド]
```

### 実際の実行手順
[具体的手順]

## ✅ 動的参照チェックリスト

### 実行前確認
- [ ] エントリーポイントからの適切な参照確認
- [ ] トリガー条件の成立確認
- [ ] 他ルールとの競合チェック

### 実行後確認
- [ ] 期待された効果の確認
- [ ] システム全体への影響確認

## 🔗 エントリーポイント統合

### 参照制御フロー
mdc-metadata-manager.mdc → [トリガー条件判定] → 本ルール参照

### 関連ルールとの連携
- [関連ルール1]: [連携内容]
```

### 3. メタルール・管理系テンプレート
```markdown
---
description: [.mdcファイルシステム管理・制御機能を1行で記述]
globs: ["*.mdc"]
alwaysApply: true
---

# [管理ルール名] - システム管理版

## 🎯 管理システム内での位置付け

### システム管理機能
- **管理範囲**: [管理対象の明確化]
- **制御機能**: [制御・統制内容]
- **エントリーポイントとの関係**: [具体的関係性]

## 🔧 管理・制御プロセス

### システム監視
[監視項目・手順]

### 品質保証
[品質管理項目・手順]

## 📊 管理指標・KPI

### システム健全性指標
- [指標1]: [基準値・測定方法]
- [指標2]: [基準値・測定方法]

## 🔗 システム統合管理

### エントリーポイント管理
- **更新連動**: システム変更時のエントリーポイント更新
- **整合性保証**: 全体システムとの矛盾防止

### 他管理ルールとの連携
- [関連管理ルール1]: [連携内容]
```

---

## 🔍 動的参照システム統合品質検証プロセス

### エントリーポイント統制確認チェックリスト
```markdown
#### システム統合検証
- [ ] mdc-metadata-manager.mdcでの適切な位置付け確認
- [ ] 動的参照トリガーの正常動作確認
- [ ] エントリーポイント経由での参照可能性確認

#### Frontmatter検証（統制版）
- [ ] description がシステム内役割を明確に表現している
- [ ] globs が動的参照効率を考慮して適切に設定されている
- [ ] alwaysApply がエントリーポイント基準に従って設定されている

#### 構造検証（統合版）
- [ ] システム内位置付けセクションが含まれている
- [ ] エントリーポイントとの関係が明記されている
- [ ] 動的参照条件が適切に記述されている

#### 連携検証
- [ ] 他ルールとの重複・矛盾がない
- [ ] エントリーポイントからの参照パスが確立されている
- [ ] システム全体での整合性が保たれている
```

### システム統合レビュー観点
```markdown
#### エントリーポイント統制適合性
- [ ] 統制システムの原則に従っている
- [ ] エントリーポイント管理下での正常動作
- [ ] 動的参照システムでの効率性

#### 技術的正確性（統合版）
- [ ] エントリーポイント経由での正常動作
- [ ] 動的参照トリガーの正確性
- [ ] システム統合での技術的問題なし

#### 実用性（システム統合版）
- [ ] エントリーポイント統制下での実用性
- [ ] 動的参照での効率的な問題解決
- [ ] システム全体での価値提供

#### 保守性（統制版）
- [ ] エントリーポイント変更への対応力
- [ ] 動的参照システム拡張への対応
- [ ] 長期的なシステム統合保守性
```

---

## 🔄 エントリーポイント統制下の継続的改善

### システム統合定期見直しプロセス
```markdown
#### 週次見直し（統制版）
- [ ] エントリーポイント統制状況の確認
- [ ] 動的参照効率の測定・評価
- [ ] 新規ルールのシステム統合状況確認

#### 月次見直し（システム最適化）
- [ ] 全体システムでの参照効率分析
- [ ] エントリーポイント統制の最適化検討
- [ ] 動的参照トリガーの調整・改善

#### 四半期見直し（システム進化）
- [ ] エントリーポイント統制システムの進化
- [ ] 新技術・要件への動的参照システム対応
- [ ] 全体アーキテクチャの改善検討
```

### システム統合改善提案プロセス
```markdown
1. **エントリーポイント統制課題の特定**
   - 統制システムでの問題点収集
   - 動的参照効率の課題確認
   - システム統合での改善要求

2. **システム統合改善案の検討**
   - エントリーポイント統制の最適化策
   - 動的参照システムの改善案
   - 全体システム効率化の検討

3. **統制システム実装・検証**
   - システム統合改善の実装
   - エントリーポイント統制下での効果測定
   - 全体システムでのフィードバック収集
```

---

## 📊 動的参照システム統合指標

### エントリーポイント統制指標
- **統制率**: エントリーポイント管理下のルール比率 > 95%
- **参照効率**: 動的参照での平均参照時間 < 2秒
- **システム整合性**: ルール間矛盾発生率 < 1%

### 動的参照システム効率指標
- **参照最適化**: 不要参照の削減率 > 80%
- **トリガー精度**: 適切な動的参照実行率 > 90%
- **統合効果**: システム全体での作業効率向上率

### システム統合品質指標
- **エントリーポイント更新率**: システム変更時の適切更新 100%
- **統制システム満足度**: 利用者の統制システム評価
- **システム拡張性**: 新規ルール追加での統合容易性

---

## 🔗 エントリーポイント統制システム関連資料

### 必須統制ファイル
- [mdc-metadata-manager.mdc](./mdc-metadata-manager.mdc): エントリーポイント・参照制御システム（最重要）
- [mdc-file-storage-rules.md](./mdc-file-storage-rules.md): 動的参照システム対応格納ルール

### 核心統制ファイル（常時参照）
- [core/cursorrules.mdc](./core/cursorrules.mdc): Cursor基本動作ルール
- [core/project-overview.mdc](./core/project-overview.mdc): プロジェクト基盤情報
- [core/commit-rules.mdc](./core/commit-rules.mdc): Git管理品質基準

### システム統合参考資料
- **動的参照システム設計原則**: エントリーポイント統制アーキテクチャ
- **参照効率最適化ガイド**: 動的参照パフォーマンス向上手法
- **システム統合ベストプラクティス**: 統制システム運用のベスト事例

---

## 📝 エントリーポイント統制システム更新履歴

| 日付 | 更新内容 | システム統合影響 | 更新者 |
|------|----------|------------------|--------|
| 2025-07-20 | 動的参照システム対応、エントリーポイント統制統合 | 全体システム刷新 | AI Assistant |

**次回見直し予定**: 2025-08-20  
**システム統制管理者**: プロジェクト管理者  
**エントリーポイント更新責任**: システム統合チーム

---

**🎯 重要**: このガイドラインは、mdc-metadata-manager.mdcエントリーポイント統制システムの中核コンポーネントです。変更時は必ずエントリーポイントとの統合整合性を確認し、システム全体への影響を評価してください。


---

**注意**: このガイドラインは、今回のマージ失敗問題を踏まえ、より品質の高い.mdcファイル作成を目的として策定されました。新しい.mdcファイルを作成する際は、必ず本ガイドラインに従ってください。
