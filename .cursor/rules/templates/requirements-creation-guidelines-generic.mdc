

# 要件定義ファイル作成・更新ガイドライン（汎用版）

## 📋 メタデータ
```yaml
title: "要件定義ファイル作成・更新ガイドライン"
version: "2.0.0"
category: "documentation-standards"
description: "要件定義ファイルの作成・更新・管理に関するガイドライン（ハードコーディング禁止・設計基本原則統合・汎用版）"
apply_to: "全プロジェクト対応"
```

## 🎯 このガイドラインの目的

### 要件定義ファイルの品質確保
- **システム基盤としての重要性**: 要件定義ファイルはシステム全体の設計指針
- **変更管理の厳格化**: 履歴保持・トレーサビリティの完全確保
- **品質基準の明確化**: 実装可能性・測定可能性の担保
- **設計基本原則統合**: ハードコーディング禁止と拡張可能設計の徹底

---

## 🏗️ 設計基本原則統合（要件定義の仕組み化）

### **設計思考アプローチ（必須適用）**
```yaml
ユーザーリクエスト実現方法の検討プロセス:
  
  Step1_要求分析:
    - [ ] ユーザーの本質的ニーズの抽出
    - [ ] 表面的要求と根本的課題の分離
    - [ ] 類似要求パターンの過去事例調査
    - [ ] スケーラビリティへの影響分析
  
  Step2_設計基本活用:
    - [ ] 抽象化可能な共通パターンの特定
    - [ ] カプセル化による責任分離の適用
    - [ ] インターフェース統一による柔軟性確保
    - [ ] 継承・委譲による拡張性設計
  
  Step3_拡張可能実装方針:
    - [ ] 設定駆動型（Configuration-Driven）設計の採用
    - [ ] ルールエンジン型（Rule-Engine）アプローチの検討
    - [ ] プラグイン系（Plugin System）アーキテクチャの評価
    - [ ] メタデータ駆動（Metadata-Driven）システムの適用

実装アプローチ決定基準:
  - 短期実装: 時間制約がある場合の最小限アプローチ
  - 中期拡張: 3-6ヶ月での拡張を見据えた設計
  - 長期維持: 1年以上の継続利用を前提とした設計
```

### **要件定義時の設計基本チェック（必須実行）**
```yaml
必須確認項目:
  - [ ] **抽象化レベル**: 具体的実装に依存しない要件記述か？
  - [ ] **拡張性担保**: 将来的な機能追加・変更に対応可能か？
  - [ ] **再利用性**: 他の類似機能で再利用可能な設計か？
  - [ ] **疎結合**: モジュール間の依存関係が適切に分離されているか？
  - [ ] **インターフェース統一**: 一貫したAPIやデータ形式か？
  - [ ] **設定外部化**: ビジネスロジックと設定の分離が可能か？
```

---

## 📊 要件定義ファイル品質基準（ハードコーディング禁止統合）

### **品質チェックポイント（ハードコーディング禁止ルール統合）**
```yaml
Level_1_Critical_禁止事項:
  - [ ] **固定値・データ構造の直接記述**: 特定の値・構造に依存していないか？
  - [ ] **技術固有パターンの固定假定**: 特定の技術・プラットフォームに限定されていないか？
  - [ ] **業務固有値の直接指定**: 特定の業界・ドメインの値をハードコードしていないか？
  - [ ] **システム固有パスの記述**: 環境依存の設定を要件に含めていないか？

Level_2_Major_制限事項:
  - [ ] **条件分岐による全パターン列挙**: if-else全列挙型の要件記述を避けているか？
  - [ ] **冗長な分岐ロジック**: switch-case型の分岐パターンを避けているか？
  - [ ] **固定データ型の前提**: 特定のデータ型に限定された要件になっていないか？
  - [ ] **単一実装方式の強制**: 一つの実装方法のみを前提としていないか？

Level_3_Minor_推奨事項:
  - [ ] **UI文字列・メッセージのハードコード**: 固定文言を避けているか？
  - [ ] **設定値の直接記述**: 設定可能な値を要件内に固定していないか？
  - [ ] **表示形式の固定化**: 特定の表示方法のみを前提としていないか？

設計基本原則_準拠:
  - [ ] **設定駆動**: JSONファイル・メタデータ駆動設計要件になっているか？
  - [ ] **ルールエンジン**: パターンマッチング・拡張可能設計要件になっているか？
  - [ ] **プラグインシステム**: 動的な機能追加に対応した要件設計か？
  - [ ] **メタデータ活用**: 実行時の動的制御が可能な要件設計か？
```

### **内容品質基準（CRITICAL）**
```yaml
必須要件:
  - [ ] 明確性: 要件が明確で誤解の余地がない
  - [ ] 測定可能性: 成功基準が定量的に測定可能
  - [ ] 実装可能性: 技術的に実現可能
  - [ ] 追跡可能性: 変更履歴が完全に追跡可能
  - [ ] 完全性: 実装に必要な全情報を含む
  - [ ] **拡張可能性**: 将来の機能追加・変更に対応可能
  - [ ] **設定駆動性**: ハードコーディングを避けた柔軟な設計

品質確保指標:
  - 要件と実装の一致率 > 90%
  - 変更履歴の完全性 100%
  - 依存関係の正確性 100%
  - メタデータの完全性 100%
  - ハードコーディング禁止遵守率 100%
```

### **要件定義専用Frontmatter構造**
```yaml
---
title: "要件定義の正式名称"
version: "X.Y.Z"
created: "YYYY-MM-DD"
updated: "YYYY-MM-DD"
status: "active|deprecated|draft"
priority: "critical|high|medium|low"
category: "architecture|feature|quality|security"
owner: "責任者・チーム名"
reviewers: ["レビュー者1", "レビュー者2"]
dependencies: ["依存ファイル1", "依存ファイル2"]
design_principles: ["configuration-driven", "rule-engine", "plugin-system", "metadata-driven"]
hardcoding_compliance: true
description: "要件定義の概要を1行で記述（設計基本原則適用済み）"
globs: ["適用対象パターン"]
alwaysApply: true
---
```

---

## 🔧 要件定義ファイル命名・配置規則

### **命名規則（厳格適用）**
```yaml
パターン: "[domain]-[type]-requirements.mdc"

正しい例:
  - api-integration-requirements.mdc
  - data-visualization-requirements.mdc
  - security-compliance-requirements.mdc
  - performance-optimization-requirements.mdc

禁止事項:
  - 日本語ファイル名
  - スペース・特殊文字の使用
  - バージョン番号の直接埋め込み
  - 曖昧な略語の使用
```

### **配置・分類ルール**
```yaml
基本配置: .cursor/rules/requirements/

サブディレクトリ分類:
  - core/: 基盤・アーキテクチャ要件
  - features/: 機能要件
  - quality/: 品質・性能要件
  - security/: セキュリティ要件
  - integration/: 統合・連携要件
```

---

## ⚠️ 要件定義ファイル作成時の注意事項

### **事前必須確認項目**
```yaml
システム確認:
  - [ ] 既存要件定義ファイルとの重複確認
  - [ ] 依存関係の完全確認
  - [ ] 循環依存の回避確認

品質確認:
  - [ ] 要件の明確性・具体性確認
  - [ ] 成功基準の測定可能性確認
  - [ ] 実装可能性の技術的検証

管理確認:
  - [ ] 要件管理体制の確認
  - [ ] バージョン管理体制の確認
  - [ ] レビュー・承認プロセスの確認
```

### **避けるべき問題パターン**
```yaml
内容問題:
  - 曖昧で解釈に幅のある要件記述
  - 測定不可能な成功基準
  - 技術的に実現困難な要件
  - 既存システムとの矛盾

管理問題:
  - 履歴削除・コメントアウト忘れ
  - 依存関係の記載漏れ
  - バージョン管理の不備
  - レビュープロセスの省略
```

---

## 🔄 継続的運用・品質管理

### **定期レビュースケジュール**
```yaml
週次: 新規追加要件の妥当性確認
月次: 要件間整合性チェック
四半期: 全要件定義の包括レビュー
年次: アーキテクチャ要件の全面見直し
```

### **自動化・ツール支援**
```yaml
自動チェック項目:
  - ファイル形式・メタデータ準拠
  - 依存関係の存在確認
  - 循環依存の検出
  - バージョン情報の一貫性

推奨ツール:
  - バージョン管理: Git + 要件定義専用ブランチ
  - 品質チェック: 自動リンタ + 依存関係チェッカー
  - 可視化: 要件依存関係図の自動生成
  - 通知: 要件変更時のチーム自動通知
```

---

*この汎用ガイドラインは要件定義の品質向上と継続的管理の確立を目的とし、どのプロジェクトでも適用可能な設計となっています。*
