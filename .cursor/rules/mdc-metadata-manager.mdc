# 🎯 Cursor Rules管理システム - エントリーポイント

**策定日**: 2025年1月31日  
**役割**: Cursor Rules全体の制御・参照管理  
**重要度**: CRITICAL - 必ず最初に参照  
**継続改善**: 動的参照システム + 要件進化対応

## 🚀 このファイルの役割

### エントリーポイント機能（司令塔）
- **最初の参照**: Cursorが最初に確認するルールファイル
- **参照制御**: ユーザー指示に基づき適切なルールファイルへ誘導
- **構造管理**: 全体の.mdcファイル構造を統制
- **継続改善**: 実装進化に応じた要件・ルール動的更新

### スケーラブル設計
- **拡張性**: 新しいルールファイル追加への対応
- **効率性**: 必要なルールのみを動的に参照
- **保守性**: 一元管理による簡単なメンテナンス
- **進化対応**: 技術・要件変化への柔軟な適応

---

## 📋 参照制御システム

### 🔴 **常時参照（alwaysApply: true）**

#### 1. **mdc-metadata-manager.mdc** - 本ファイル
- **役割**: エントリーポイント・参照制御
- **参照タイミング**: 全ての操作で最初に参照

#### 2. **mdc-creation-guidelines.mdc**
- **役割**: .mdcファイル作成の品質基準
- **参照タイミング**: .mdcファイル関連作業時

#### 3. **project-starter-kit.mdc**
- **役割**: 新規プロジェクト用スターターキット
- **参照タイミング**: 新規プロジェクト導入時

#### 4. **core/project-overview.mdc**
- **役割**: プロジェクト基盤情報
- **参照タイミング**: プロジェクト全体に関わる作業時

#### 5. **core/commit-rules.mdc**
- **役割**: Git操作の品質管理
- **参照タイミング**: コミット・プッシュ作業時

#### 6. **core/cursorrules.mdc**
- **役割**: Cursor AI基本動作ルール
- **参照タイミング**: 全ての操作時

#### 7. **implementation/logging/implementation-log-rules.mdc**
- **役割**: 実装ログ作成・管理
- **参照タイミング**: 実装完了時、進捗記録時

### 🟢 **要件定義ルール（alwaysApply: true）** ← プロジェクト要件対応

#### 8. **requirements/application-requirements.mdc**
- **役割**: アプリケーション機能・品質・制約要件
- **参照タイミング**: 機能実装・変更・拡張時
- **汎用対応**: プロジェクト固有要件を最新実装基準で定義

#### 9. **requirements/technical-architecture.mdc**
- **役割**: 技術アーキテクチャ設計原則・インフラ要件
- **参照タイミング**: アーキテクチャ設計・変更時
- **汎用対応**: 技術スタック別アーキテクチャ要件対応

#### 10. **requirements/data-structure-requirements.mdc**
- **役割**: データ構造・スキーマ・拡張性要件
- **参照タイミング**: データ関連実装・変更時
- **汎用対応**: データベース・ファイル形式汎用対応

#### 11. **requirements/extensibility-requirements.mdc**
- **役割**: 拡張性設計・プラグイン・将来対応要件
- **参照タイミング**: 機能拡張・技術進化対応時
- **汎用対応**: プラットフォーム・フレームワーク汎用拡張設計

### 🔵 **開発ルール統合（alwaysApply: true）** ← 汎用開発原則

#### 12. **development/guidelines/development-guidelines.mdc**
- **役割**: 包括的開発ガイドライン（スケーラブル原則統合済み）
- **参照タイミング**: 全ての開発作業時
- **汎用対応**: ハードコーディング禁止・カプセル化・汎用化原則

#### 13. **development/patterns/architecture-patterns.mdc**
- **役割**: アーキテクチャパターン（拡張アーキテクチャ統合済み）
- **参照タイミング**: アーキテクチャ設計・実装時
- **汎用対応**: フレームワーク・プラットフォーム汎用パターン

#### 14. **development/guidelines/security-guidelines.mdc**
- **役割**: セキュリティガイドライン（セキュリティ検証層統合済み）
- **参照タイミング**: セキュリティ関連作業時
- **汎用対応**: 多層防御・プラットフォーム横断セキュリティ

#### 15. **development/guidelines/tech-stack-specific.mdc**
- **役割**: 技術スタック固有ガイドライン（設定管理統合済み）
- **参照タイミング**: 技術固有実装時
- **汎用対応**: 動的設定管理・マルチプラットフォーム対応

### 🟠 **動的参照（alwaysApply: false）**

#### 実装・品質関連
```yaml
implementation/:
  - llm/design-guidelines.mdc        # AI/LLM関連実装時
  - llm/implementation-guide.mdc     # AI機能実装時
  - quality/deliverables-checklist.mdc  # 成果物提出時
  - quality/revise-rules.mdc        # コード修正時
  - logging/implementation-log-stock.mdc  # ログ蓄積時
```

#### ワークフロー関連
```yaml
development/workflows/:
  - dependency-separation-workflow.mdc  # 依存関係分離時
  - progress-tracking-workflow.mdc      # 進捗管理時
  - recommended_workflow.mdc            # 推奨ワークフロー時
```

#### システム・管理関連
```yaml
system/:
  - cursor-limitations.mdc          # 制限事項対応時

scripts/:
  - cursor-rules-setup.sh           # 新規プロジェクト初期化時
  - validate-structure.sh           # 構造検証時
  - generate-report.sh              # レポート生成時
```

---

## 🎯 ユーザー指示別参照マトリックス

### 📝 .mdcファイル関連指示
```yaml
指示パターン:
  - "新しいルールを作成"
  - "ルールを修正"
  - "ガイドライン作成"

必須参照:
  - mdc-creation-guidelines.mdc (作成基準)
  - mdc-file-storage-rules.md (格納場所)

条件参照:
  - 関連する既存ルールファイル
```

### 🎯 **要件確認・実装指示** ← 汎用プロジェクト対応
```yaml
指示パターン:
  - "アプリの要件を確認"
  - "実装要件を教えて"
  - "データ構造の制約は？"
  - "拡張可能性を確認"

必須参照:
  - requirements/application-requirements.mdc (機能・品質要件)
  - requirements/technical-architecture.mdc (技術要件)
  - requirements/data-structure-requirements.mdc (データ要件)
  - requirements/extensibility-requirements.mdc (拡張要件)

条件参照:
  - 関連する開発・実装ルール
```

### 🔧 開発・実装指示
```yaml
指示パターン:
  - "機能を実装"
  - "バグを修正"
  - "コードを改善"

必須参照:
  - development/guidelines/development-guidelines.mdc (包括開発ルール)
  - requirements/application-requirements.mdc (実装要件確認)

条件参照:
  - development/guidelines/security-guidelines.mdc (セキュリティ要素時)
  - development/guidelines/tech-stack-specific.mdc (技術固有作業時)
  - requirements/data-structure-requirements.mdc (データ関連時)
```

### 🏗️ アーキテクチャ・設計指示
```yaml
指示パターン:
  - "アーキテクチャを設計"
  - "システム構成を変更"
  - "設計パターンを適用"

必須参照:
  - development/patterns/architecture-patterns.mdc (設計パターン)
  - requirements/technical-architecture.mdc (技術アーキテクチャ要件)

条件参照:
  - requirements/extensibility-requirements.mdc (拡張性検討時)
  - development/guidelines/security-guidelines.mdc (セキュリティ設計時)
```

### 📊 **データ・UI/UX関連指示** ← 汎用化
```yaml
指示パターン:
  - "データ構造を変更"
  - "新しいデータソースに対応"
  - "UI/UXを改善"
  - "コンポーネントを追加"

必須参照:
  - requirements/data-structure-requirements.mdc (データ構造制約)
  - requirements/extensibility-requirements.mdc (UI/データ拡張性)

条件参照:
  - development/patterns/architecture-patterns.mdc (データ・UIアーキテクチャ)
  - requirements/application-requirements.mdc (機能要件確認)
```

### 🤖 AI・自動化関連指示
```yaml
指示パターン:
  - "プロンプトを作成"
  - "AI機能を実装"
  - "自動化を改善"

必須参照:
  - implementation/llm/design-guidelines.mdc
  - implementation/llm/implementation-guide.mdc
  - requirements/application-requirements.mdc (AI要件確認)

条件参照:
  - development/guidelines/security-guidelines.mdc (AI セキュリティ時)
  - requirements/extensibility-requirements.mdc (AI拡張時)
```

### 📊 プロジェクト管理・実装ログ指示
```yaml
指示パターン:
  - "進捗を報告"
  - "実装ログを作成"
  - "タスクを管理"
  - "実装完了"
  - "動作確認できました"
  - "問題ありません"

必須参照:
  - implementation/logging/implementation-log-rules.mdc (実装ログ作成)
  - development/workflows/progress-tracking-workflow.mdc (進捗管理)

条件参照:
  - implementation/logging/implementation-log-stock.mdc (知識蓄積時)
  - templates/implementation-log-template.md (ログ作成時)
```

---

## 📁 汎用ディレクトリ構造管理

### 標準構造（プロジェクト汎用）
```
.cursor/rules/
├── mdc-metadata-manager.mdc           # 🎯 エントリーポイント (alwaysApply: true)
├── mdc-creation-guidelines.mdc        # 📝 作成ガイド (alwaysApply: true)
├── mdc-file-storage-rules.md          # 📁 格納ルール
├── project-starter-kit.mdc           # 🚀 スターターキット (alwaysApply: true)
├── QUICKSTART.md                      # 📖 クイックスタートガイド
├── README.md                          # 📚 概要・ナビゲーション
├── requirements/                      # 🎯 プロジェクト要件定義 (alwaysApply: true)
│   ├── application-requirements.mdc   # アプリケーション要件
│   ├── technical-architecture.mdc     # 技術アーキテクチャ要件
│   ├── data-structure-requirements.mdc # データ構造要件
│   └── extensibility-requirements.mdc # 拡張性要件
├── core/                              # 🏛️ 核心ルール
│   ├── cursorrules.mdc               # (alwaysApply: true)
│   ├── commit-rules.mdc              # (alwaysApply: true)
│   └── project-overview.mdc          # (alwaysApply: true)
├── development/                       # 🔧 開発関連 (汎用対応 - alwaysApply: true)
│   ├── guidelines/
│   │   ├── development-guidelines.mdc      # 包括開発ガイド
│   │   ├── security-guidelines.mdc        # セキュリティガイド
│   │   └── tech-stack-specific.mdc        # 技術固有ガイド
│   ├── patterns/
│   │   └── architecture-patterns.mdc      # アーキテクチャパターン
│   └── workflows/
│       ├── dependency-separation-workflow.mdc
│       ├── recommended_workflow.mdc
│       └── progress-tracking-workflow.mdc
├── implementation/                    # 🛠️ 実装関連  
│   ├── llm/                          # AI/LLM実装
│   ├── quality/                      # 品質管理
│   └── logging/
│       ├── implementation-log-rules.mdc  # (alwaysApply: true)
│       └── implementation-log-stock.mdc  # (alwaysApply: false)
├── system/                           # ⚙️ システム関連
├── scripts/                          # 🔧 スクリプト・ツール
│   ├── cursor-rules-setup.sh        # 新規プロジェクト初期化
│   ├── validate-structure.sh        # 構造検証
│   └── generate-report.sh           # レポート生成
└── templates/                        # 📋 テンプレート集
    ├── requirements/                 # 要件定義テンプレート
    ├── tech-stack/                   # 技術スタック固有
    ├── team-structure/               # チーム構成対応
    └── implementation-log-template.md # 実装ログテンプレート
```

### **プロジェクト汎用化ポイント**
1. **要件定義**: プロジェクト固有要件をテンプレート化
2. **技術スタック**: マルチプラットフォーム・フレームワーク対応
3. **開発ルール**: 言語・フレームワーク汎用原則
4. **拡張性**: プラグインシステム・カスタマイズ対応

---

## 🔄 継続的改善サイクル（汎用対応）

### 改善プロセス管理
```yaml
continuous_improvement_cycle:
  step_1_monitoring:
    - "プロジェクト進捗・課題の継続監視"
    - "開発チームフィードバック収集"
    - "技術進化・業界標準の追跡"
    
  step_2_analysis:
    - "問題根本原因分析"
    - "改善機会の特定"
    - "影響度・優先度評価"
    
  step_3_planning:
    - "改善計画の策定"
    - "要件・ルール更新案作成"
    - "プロジェクトスケジュール調整"
    
  step_4_implementation:
    - "要件・ルール更新実施"
    - "関連ファイル同期更新"
    - "エントリーポイント参照制御更新"
    
  step_5_validation:
    - "改善効果測定"
    - "副作用・影響確認"
    - "継続監視体制確立"
```

### エントリーポイント司令塔責任（汎用システム）
```typescript
// ✅ 汎用プロジェクト対応司令塔機能
interface UniversalCommandCenterResponsibilities {
  reference_control: {
    dynamic_routing: 'ユーザー指示・プロジェクト特性に基づく最適ルール誘導';
    load_balancing: '参照負荷分散・効率最適化';
    version_management: 'ルールバージョン統制・プロジェクト互換性保証';
  };
  
  evolution_management: {
    requirement_updates: 'プロジェクト進化に応じた要件更新統制';
    rule_synchronization: '関連ルール間の一貫性保証';
    platform_compatibility: '技術プラットフォーム変更への対応';
  };
  
  quality_assurance: {
    consistency_monitoring: 'ルール間矛盾・重複検出';
    effectiveness_tracking: 'ルール効果測定・改善提案';
    user_experience: 'ルール参照体験の継続最適化';
  };
}
```

---

## 📊 管理・監視機能（汎用対応）

### 参照状況モニタリング
```bash
# 全ルールファイルの参照頻度確認
find .cursor/rules -name "*.mdc" -exec echo "=== {} ===" \; \
  -exec grep -c "alwaysApply\|description" {} \;

# alwaysApply設定の一覧
grep -r "alwaysApply:" .cursor/rules/ --include="*.mdc" | sort

# 設定なしファイルの検出
find .cursor/rules -name "*.mdc" -exec grep -L "alwaysApply:" {} \;

# 要件定義ファイルの確認
ls -la .cursor/rules/requirements/

# 開発ルールの確認
ls -la .cursor/rules/development/guidelines/
ls -la .cursor/rules/development/patterns/
```

### 品質チェック機能
```bash
# システム全体の構造・品質チェック
./.cursor/rules/scripts/validate-structure.sh

# 包括的なシステム状況レポート生成
./.cursor/rules/scripts/generate-report.sh

# プロジェクト要件整合性チェック
grep -r "プロジェクト固有" .cursor/rules/requirements/

# 汎用化状況チェック
grep -r "汎用対応" .cursor/rules/development/
```

---

## 🎯 期待される効果（汎用プロジェクト）

### ✅ **参照効率の向上**
- **最適化**: プロジェクト特性に応じた必要ルールの動的参照
- **高速化**: エントリーポイントからの効率的なナビゲーション
- **スケーラビリティ**: プロジェクト規模・複雑性への対応

### ✅ **管理の簡素化**
- **一元管理**: プロジェクト横断での参照制御統一
- **保守性**: 技術変更・要件変更への柔軟な対応
- **透明性**: プロジェクト状況・参照関係の明確化

### ✅ **品質の向上**
- **一貫性**: プロジェクト横断での統一基準
- **正確性**: プロジェクト特性に応じた適切なルール適用
- **完全性**: 要件・実装の見落とし防止

### ✅ **継続改善の実現**
- **動的更新**: プロジェクト進化に応じた要件・ルール更新
- **汎用司令塔**: プロジェクト横断でのベストプラクティス集約
- **改善サイクル**: 継続的な品質向上・効率化

---

## 📚 関連ファイル（汎用テンプレート）

### 必須関連ファイル
- [mdc-creation-guidelines.mdc](./mdc-creation-guidelines.mdc): .mdcファイル作成ガイドライン
- [mdc-file-storage-rules.md](./mdc-file-storage-rules.md): ファイル格納場所管理
- [project-starter-kit.mdc](./project-starter-kit.mdc): 新規プロジェクト用スターターキット

### **汎用要件定義テンプレート**
- [requirements/application-requirements.mdc](./requirements/application-requirements.mdc): アプリケーション要件定義テンプレート
- [requirements/technical-architecture.mdc](./requirements/technical-architecture.mdc): 技術アーキテクチャ要件テンプレート
- [requirements/data-structure-requirements.mdc](./requirements/data-structure-requirements.mdc): データ構造要件テンプレート
- [requirements/extensibility-requirements.mdc](./requirements/extensibility-requirements.mdc): 拡張性要件テンプレート

### **汎用開発ルールテンプレート**
- [development/guidelines/development-guidelines.mdc](./development/guidelines/development-guidelines.mdc): 包括開発ガイドライン（汎用版）
- [development/patterns/architecture-patterns.mdc](./development/patterns/architecture-patterns.mdc): アーキテクチャパターン（汎用版）
- [development/guidelines/security-guidelines.mdc](./development/guidelines/security-guidelines.mdc): セキュリティガイドライン（汎用版）
- [development/guidelines/tech-stack-specific.mdc](./development/guidelines/tech-stack-specific.mdc): 技術固有ガイドライン（汎用版）

### スターターキット関連
- [QUICKSTART.md](./QUICKSTART.md): 10分間クイックスタートガイド
- [scripts/cursor-rules-setup.sh](./scripts/cursor-rules-setup.sh): 自動初期化スクリプト
- [scripts/validate-structure.sh](./scripts/validate-structure.sh): 構造・品質検証
- [scripts/generate-report.sh](./scripts/generate-report.sh): システム状況レポート

### 主要参照先
- [core/cursorrules.mdc](./core/cursorrules.mdc): Cursor基本動作ルール
- [core/project-overview.mdc](./core/project-overview.mdc): プロジェクト概要テンプレート
- [core/commit-rules.mdc](./core/commit-rules.mdc): Git管理ルール

---

## 📝 更新履歴

| 日付 | 更新内容 | システム統合影響 | 更新者 |
|------|----------|------------------|--------|
| 2025-01-31 | 汎用プロジェクト対応、要件定義ルール統合、継続改善サイクル強化 | 汎用システム司令塔機能構築 | AI Assistant |
| 2025-07-20 | project-starter-kit.mdc追加、スクリプト統合、新規プロジェクト対応強化 | 全体システム刷新 | AI Assistant |
| 2025-07-20 | エントリーポイント化、階層移動、動的参照システム構築 | 参照制御システム構築 | AI Assistant |

**次回見直し予定**: 2025-03-31  
**管理者**: プロジェクト管理者  
**司令塔責任**: 汎用システム統制チーム

---

**🎯 重要**: このファイルは汎用Cursor Rulesシステムの司令塔です。プロジェクト固有の要件は requirements/ 配下で定義し、継続的改善サイクルにより常に最新状態が維持されます。
