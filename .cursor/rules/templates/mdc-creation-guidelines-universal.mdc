---
description: "ルールファイル作成時に参照すべき包括的なガイドライン、品質基準、プロセスを定義（Cursor Project Rules準拠・汎用版）"
globs: ["*.mdc", ".cursor/rules/**/*.mdc", "*.cursorrules"]
alwaysApply: true
---

# ルールファイル作成ガイドライン（汎用版）

## 📋 メタデータ
```yaml
title: "ルールファイル作成ガイドライン"
version: "2.0.0"
category: "development-standards"
scope: "rule-creation"
apply_to: "全プロジェクト対応"
```

## 🎯 このガイドラインの目的

### 品質統一と効率向上
- **統制された作成プロセス**: メタデータ管理との連携
- **再利用性の確保**: 動的参照システムでの活用促進
- **学習コストの削減**: 一元化された管理による理解促進

### Cursor Project Rules適合性（重要）
- **Cursor 公式対応**: Cursor v0.49+ の Project Rules システムに完全準拠
- **発動条件管理**: `Always` / `Auto Attached` / `Agent Requested` / `Manual` の適切設定
- **シンボル参照**: プロジェクト内ファイルの正確な指定によるコンテキスト提供
- **ルール効果確認**: ルール参照時の「YAAAARRRR!」トリガーによる動作確認機能

---

## 📊 動的参照システム対応のfrontmatter構造

### 必須Frontmatter構造（拡張版）
```yaml
---
description: [このルールが何を定義するかを1行で明確に記述 - 80文字以内推奨]
globs: ["対象ファイルパターン1", "対象ファイルパターン2"]
alwaysApply: [true/false - 適切な設定]
---
```

#### Frontmatterフィールド詳細（Cursor Project Rules対応）

##### 1. description（必須・強化版）
```yaml
# ✅ 良い例
description: "依存関係ファイルの混入を防ぎ、機能別ブランチの純粋性を確保するワークフロー"
description: "プロジェクトの概要、目標、技術スタック、制約条件を定義し、プロジェクト全体の基盤情報を提供"
description: "ルールファイル作成時に参照すべき包括的なガイドライン、品質基準、プロセスを定義（動的参照システム対応版）"

# ❌ 悪い例
description: "ルール"
description: "開発に関するルール"
description: "これはプロジェクトで使用するルールファイルです（冗長）"
```

**記述基準（強化版・Cursor Project Rules対応）**:
- **1行で完結**: 80文字以内厳守
- **具体的な機能**: 何のためのルールかが即座に理解可能
- **動作指向**: 「〜を防ぐ」「〜を確保する」「〜を定義する」等の目的を含む
- **システム統合**: 必要に応じて動的参照システムとの関係を明記
- **ルール適用確認**: ファイル特有性を記載してルール適用の把握を可能にする
- **Agent理解促進**: Agent Requestedでエージェントが参照判断できる明確性

##### 2. globs（必須・最適化版）
```yaml
# ✅ 核心ルール（広範囲適用）
globs: ["*"]

# ✅ 特定技術・言語固有
globs: ["*.ts", "*.tsx", "*.js", "*.jsx"]
globs: ["package.json", "package-lock.json", "yarn.lock"]

# ✅ 特定ディレクトリ・ファイルパターン
globs: ["src/**/*", "components/**/*"]
globs: ["*.mdc", "*.md"]

# ❌ 避けるべき設定
globs: []  # 適用対象が不明
globs: ["**/*", "*", "*.mdc"]  # 重複・冗長
```

**設定基準（最適化版）**:
- **具体的パターン**: 対象を明確に特定
- **最小必要範囲**: 過度に広範囲に設定しない
- **パフォーマンス考慮**: 動的参照システムの効率を重視
- **保守性重視**: 将来の変更に対応しやすい形で設定

##### 3. alwaysApply（必須・Cursor Project Rules準拠）
```yaml
# Cursor Project Rules対応設定

# 常時参照（alwaysApply: true）
alwaysApply: true

# 動的参照（alwaysApply: false）  
alwaysApply: false
```

**設定基準（Cursor Project Rules準拠）**:
- **必須記載**: alwaysApplyは必ず設定（true/false明示）
- **Cursor対応**: 発動条件とalwaysApplyの対応関係
  - `Always` ↔ `alwaysApply: true` (常にコンテキスト参照)
  - `Auto Attached` ↔ `alwaysApply: false` + 適切なglobs設定
  - `Agent Requested` ↔ `alwaysApply: false` + description明確化
  - `Manual` ↔ `alwaysApply: false` + 明示的参照時のみ
- **基準**: プロジェクト管理ルールの分類に従う
- **true**: セキュリティ、品質、プロジェクト基盤、メタルール管理
- **false**: 特定作業時、プロジェクト段階依存、条件付き参照

---

## 📖 ルールファイル本文構造標準

### 1. タイトル階層
```markdown
# メインタイトル（ルール名） - [動的参照システム対応版]

## 🎯 [システム内での位置付け]（推奨セクション）
### このルールの役割
### 他ルールとの関係

## 🚨 背景と重要性（必須セクション）
### 発生した問題
### このルールが解決する問題

## 📋 Phase 1: [具体的フェーズ名]
### 1.1 [具体的手順名]
### 1.2 [具体的手順名]

## 🔧 Phase 2: [具体的フェーズ名]
### 2.1 [具体的手順名]

## 🛠️ トラブルシューティング（推奨セクション）
### 4.1 [問題パターン1]の場合
### 4.2 [問題パターン2]の場合

## ✅ チェックリスト（推奨セクション）
### [段階1]
### [段階2]

## 🎯 期待される効果（必須セクション）

## 🔗 関連ルール・統合（必須セクション）
### 他ルールとの連携
```

### 2. 絵文字使用標準
| 用途 | 絵文字 | 使用場面 | 意味 |
|---|-----|----|-----|
| **システム・統制** | 🎯 | 位置付け関連 | システム内位置付け |
| **重要・警告** | 🚨 | 背景、重要な注意事項 | 必須理解事項 |
| **手順・プロセス** | 📋 🔧 🛠️ | 各Phase、トラブルシューティング | 段階的実行 |
| **確認・検証** | ✅ ❌ ⚠️ | チェックリスト、例示 | 品質保証 |
| **統合・連携** | 🔗 | 関連ルール | システム統合 |
| **効果・目標** | 🎯 | 効果、目標 | システム貢献 |

### 3. コードブロック標準
```markdown
#### 実行可能コマンド（動的参照システム対応）
```bash
# コメント: 適切な実行を明記

git status --porcelain

# 条件分岐がある場合は参照ルールを明記
if [ -n "$FILES" ]; then
  echo "❌ エラー: 適切なルールを参照"
fi
```

#### 設定例・テンプレート
```yaml
# 設定例
dynamic_reference: 
  level: "conditional"
  triggers: ["specific_task", "project_phase"]
```
```

---

## 🏗️ ルールファイル作成プロセス

### Phase 1: 要件分析
```markdown
### 1.1 システム確認
- [ ] 既存ルールファイルとの重複確認
- [ ] 他ルールとの競合チェック

### 1.2 動的参照レベル決定
- [ ] alwaysApply: true（常時参照）の必要性判定
- [ ] 動的参照の適用条件・トリガーの特定

### 1.3 システム統合要件分析
- [ ] 他ルールとの連携関係定義
- [ ] 全体システムでの一貫性確保
```

### Phase 2: 構造設計
```markdown
### 2.1 Frontmatter設計
- [ ] description: システム内での役割を明確に記述
- [ ] globs: 動的参照効率を考慮した最適範囲設定
- [ ] alwaysApply: 適切設定

### 2.2 本文構造設計
- [ ] 他ルールとの関係性説明セクション追加
- [ ] 動的参照トリガー条件の明記
- [ ] 連携方法の記述

### 2.3 品質基準確認
- [ ] 参照可能性
- [ ] 効率性
- [ ] 整合性
```

### Phase 3: 実装・検証
```markdown
### 3.1 ルールファイル作成実装
- [ ] 構造標準に従った実装
- [ ] 動的参照トリガーの適切な設定

### 3.2 統合動作確認・検証
- [ ] 動的参照トリガーの正常動作確認
- [ ] 他ルールとの競合・矛盾チェック
```

---

## ⭐ 品質基準

### 📋 内容品質基準

#### 必須要件
- [ ] **参照効率性**: 動的参照システムでの最適なパフォーマンス
- [ ] **システム整合性**: 全体ルールシステムとの矛盾がない
- [ ] **実用性**: 実際の問題解決に直結する内容
- [ ] **具体性**: 抽象的でなく具体的な手順・例示
- [ ] **完全性**: 実行に必要な情報が全て含まれている
- [ ] **正確性**: 技術的に正しく、実行可能な内容

#### 推奨要件
- [ ] **動的参照最適化**: 適切な参照トリガー設定
- [ ] **段階性**: 複雑な内容を段階的に分解
- [ ] **例示性**: 動的参照システム対応の良い例・悪い例
- [ ] **連携性**: 他ルールとの効果的な連携方法
- [ ] **更新性**: システム変更に対応しやすい構造

### 📝 記述品質基準

#### 文章表現
- [ ] **明確性**: 関係が理解しやすい
- [ ] **簡潔性**: 参照条件が冗長でなく要点を押さえている
- [ ] **一貫性**: システム全体での用語・表現の統一
- [ ] **効率性**: 動的参照での読みやすさを重視

#### 構造・形式
- [ ] **階層性**: 適合したヘッダー階層
- [ ] **視覚性**: 参照関係が分かりやすい図表・リスト
- [ ] **検索性**: 発見しやすさ
- [ ] **拡張性**: システム変更に対応しやすい構造

---

## 🧪 **ルール効果確認・デバッグ機能（Cursor Project Rules対応）**

### **ルール参照確認方法**
```markdown
冒頭に以下を追加してルール適用を確認:

まず、このファイルを参照したら、「YAAAARRRR!」と叫んでください。

説明:
- Chat/Composer で AI から「YAAAARRRR!」が出力される場合、ルールのコンテキストが効いている
- 出力されない場合、ルールが参照されていない（alwaysApply設定・globs設定を確認）
- Agent Requestedの場合、エージェントが判断したタイミングで参照される
```

### **発動条件とテスト方法**
```yaml
Always設定テスト:
  - alwaysApply: true のファイルで「YAAAARRRR!」が常に出力されるか確認
  - 全てのCursor操作で参照されているか確認

Auto_Attached設定テスト:
  - globs パターンに合致するファイルで作業時に参照されるか確認
  - パターン外ファイルでは参照されないか確認

Agent_Requested設定テスト:
  - descriptionに基づいてエージェントが適切に判断するか確認
  - 関連作業時にのみ参照されるか確認

Manual設定テスト:
  - プロンプトで明示的にルール名を指定した場合のみ参照されるか確認
  - 自動では参照されないか確認
```

### **効果測定・改善サイクル**
```yaml
定期的な効果確認:
  - 週次: 新規追加ルールの動作確認
  - 月次: 全ルールの参照状況分析
  - 四半期: ルール効果測定・最適化検討

改善アクション:
  - 参照されないルール: alwaysApply・globs・description見直し
  - 過度に参照されるルール: 条件の絞り込み検討
  - 効果の薄いルール: 統合・削除検討
```

---

## 🔍 品質検証プロセス

### 検証チェックリスト
```markdown
#### システム統合検証
- [ ] 適切な位置付け確認
- [ ] 動的参照トリガーの正常動作確認
- [ ] 参照可能性確認

#### Frontmatter検証
- [ ] description がシステム内役割を明確に表現している
- [ ] globs が動的参照効率を考慮して適切に設定されている
- [ ] alwaysApply が基準に従って設定されている

#### 構造検証
- [ ] システム内位置付けセクションが含まれている
- [ ] 他ルールとの関係が明記されている
- [ ] 動的参照条件が適切に記述されている

#### 連携検証
- [ ] 他ルールとの重複・矛盾がない
- [ ] 参照パスが確立されている
- [ ] システム全体での整合性が保たれている
```

### レビュー観点
```markdown
#### 適合性
- [ ] 原則に従っている
- [ ] 正常動作
- [ ] 効率性

#### 技術的正確性
- [ ] 正常動作
- [ ] 動的参照トリガーの正確性
- [ ] システム統合での技術的問題なし

#### 実用性
- [ ] 実用性
- [ ] 動的参照での効率的な問題解決
- [ ] システム全体での価値提供

#### 保守性
- [ ] 変更への対応力
- [ ] 動的参照システム拡張への対応
- [ ] 長期的なシステム統合保守性
```

---

## 🔄 継続的改善

### 定期見直しプロセス
```markdown
#### 週次見直し
- [ ] 状況の確認
- [ ] 動的参照効率の測定・評価
- [ ] 新規ルールのシステム統合状況確認

#### 月次見直し（システム最適化）
- [ ] 全体システムでの参照効率分析
- [ ] 最適化検討
- [ ] 動的参照トリガーの調整・改善

#### 四半期見直し（システム進化）
- [ ] システムの進化
- [ ] 新技術・要件への動的参照システム対応
- [ ] 全体アーキテクチャの改善検討
```

### 改善提案プロセス
```markdown
1. **課題の特定**
   - 問題点収集
   - 動的参照効率の課題確認
   - システム統合での改善要求

2. **改善案の検討**
   - 最適化策
   - 動的参照システムの改善案
   - 全体システム効率化の検討

3. **実装・検証**
   - システム統合改善の実装
   - 効果測定
   - 全体システムでのフィードバック収集
```

---

## 📊 指標

### 品質指標
- **統制率**: 管理下のルール比率 > 95%
- **参照効率**: 動的参照での平均参照時間 < 2秒
- **システム整合性**: ルール間矛盾発生率 < 1%

### 効率指標
- **参照最適化**: 不要参照の削減率 > 80%
- **トリガー精度**: 適切な動的参照実行率 > 90%
- **統合効果**: システム全体での作業効率向上率

### 品質指標
- **更新率**: システム変更時の適切更新 100%
- **満足度**: 利用者の評価
- **拡張性**: 新規ルール追加での統合容易性

---

*この汎用ルールファイル作成ガイドラインは、どのプロジェクトでも適用可能な設計となっており、高品質なルールシステムの構築と継続的な改善を実現します。*
