# 🎯 **Cursor Rules 動的参照システム（汎用テンプレート）**

**Version**: 1.0.0  
**Updated**: 2025-07-22  
**Purpose**: プロジェクト種別・技術スタックを問わない汎用的動的参照制御システム  
**Template**: このファイルは汎用テンプレートです。プロジェクト固有にカスタマイズして使用してください。

## 🎯 ユーザー指示別参照マトリックス

### 📝 .mdcファイル関連指示
```yaml
指示パターン:
  - "新しいルールを作成"
  - "ルールを修正"
  - "ガイドライン作成"

必須参照:
  - mdc-creation-guidelines.mdc (作成基準)
  - mdc-file-storage-rules.md (格納場所)

条件参照:
  - 関連する既存ルールファイル
```

### 🎯 **要件確認・実装指示**
```yaml
指示パターン:
  - "[PROJECT_TYPE]の要件を確認"
  - "実装要件を教えて"
  - "システム制約は？"
  - "拡張可能性を確認"
  - "XXXXを修正して"
  - "大規模改修・機能追加"
  - "[DOMAIN_SPECIFIC]機能の改善"
  - "自動化システム強化"
  - "API統合・最適化"

必須参照:
  - templates/extensibility-requirements-template.mdc (拡張性要件)
  - templates/requirements-management-meta-rules.mdc (要件管理メタルール)

条件参照:
  - プロジェクト固有要件ファイル（requirements/配下）
  - 技術スタック固有ルール（development/配下）

大規模改修時の強制チェック:
  - 影響ファイル数 > 5個 または 実装期間 > 1週間の場合
  - 要件定義の更新必要性確認必須
  - 履歴保持（コメントアウト）方式で変更管理
  - Version管理・トレーサビリティの確保
  - 実装プラン・進捗管理項目必須適用
```

### 🚨 **要件定義管理強制チェック**
```yaml
適用条件:
  - 任意の開発・実装・修正指示

強制実行項目:
  1. 該当要件定義ファイルの確認
  2. 変更影響範囲の評価
  3. 要件定義更新の必要性判定
  4. メタルール準拠の確認

判定基準:
  - 軽微な変更: 既存要件内で対応可能
  - 中規模変更: 要件定義の部分更新
  - 大規模変更: 包括的要件定義見直し

必須アクション:
  - 要件定義の読み込み・理解
  - 実装との整合性確認
  - 必要に応じた要件定義更新提案
```

### 🔧 開発・実装指示
```yaml
指示パターン:
  - "機能を実装"
  - "バグを修正"
  - "コードを改善"
  - "性能を最適化"
  - "セキュリティを強化"

必須参照:
  - development/guidelines/development-guidelines.mdc (包括開発ルール)
  - project-starter-kit.mdc (プロジェクト基盤)

条件参照:
  - development/guidelines/security-guidelines.mdc (セキュリティ要素時)
  - development/guidelines/tech-stack-specific.mdc (技術固有作業時)
  - templates/extensibility-requirements-template.mdc (拡張性検討時)
```

### 🏗️ アーキテクチャ・設計指示
```yaml
指示パターン:
  - "アーキテクチャを設計"
  - "システム構成を変更"
  - "設計パターンを適用"
  - "スケーラビリティを向上"

必須参照:
  - development/patterns/architecture-patterns.mdc (設計パターン)
  - templates/extensibility-requirements-template.mdc (拡張性要件)

条件参照:
  - development/guidelines/security-guidelines.mdc (セキュリティ設計時)
  - templates/requirements-management-meta-rules.mdc (要件管理時)
```

### 🎯 **拡張性・スケーラビリティ関連指示**
```yaml
指示パターン:
  - "拡張性を向上させたい"
  - "スケーラビリティを確認"
  - "汎用性を高める"
  - "新機能追加の準備"
  - "プラグインシステム実装"
  - "動的システム設計"
  - "モジュール化・コンポーネント化"

必須参照:
  - templates/extensibility-requirements-template.mdc (拡張性・スケーラビリティ要件)
  - project-starter-kit.mdc (基盤システム)

条件参照:
  - templates/requirements-management-meta-rules.mdc (実装プラン管理時)
  - development/patterns/architecture-patterns.mdc (設計パターン時)
  - development/guidelines/development-guidelines.mdc (開発ガイドライン時)

実装プラン管理:
  - 実装ロードマップ参照必須
  - 進捗トラッキング更新必須
  - 品質保証チェックリスト適用必須
```

### **🔧 実装プラン・進捗管理指示**
```yaml
指示パターン:
  - "実装計画を立てる"
  - "進捗を確認・更新"
  - "Phase別実装状況"
  - "品質保証・検証"
  - "実装完了・次フェーズ"
  - "要件定義をアップデート"

必須参照:
  - templates/requirements-management-meta-rules.mdc (実装プラン管理メタルール)
  - project-starter-kit.mdc (プロジェクト基盤管理)

条件参照:
  - templates/extensibility-requirements-template.mdc (拡張性実装時)
  - implementation/logging/implementation-log-rules.mdc (実装ログ作成時)
  - development/workflows/progress-tracking-workflow.mdc (進捗管理ワークフロー時)

メタルール準拠:
  - Version管理強化ルール適用
  - 履歴保持方式必須
  - 実装プラン・進捗・品質保証項目必須
```

### 🤖 [DOMAIN_SPECIFIC]技術関連指示（カスタマイズ可能）
```yaml
# 🔧 カスタマイズ例：AI/LLM プロジェクトの場合
指示パターン:
  - "プロンプトを作成"
  - "AI機能を実装"
  - "LLM統合を改善"
  - "自動化システム構築"

必須参照:
  - development/guidelines/development-guidelines.mdc ([DOMAIN]開発ガイドライン)
  - templates/extensibility-requirements-template.mdc ([DOMAIN]拡張要件)

条件参照:
  - development/guidelines/security-guidelines.mdc ([DOMAIN] セキュリティ時)
  - プロジェクト固有[DOMAIN]要件ファイル

# 🔧 カスタマイズ例：E-commerce プロジェクトの場合
# 指示パターン:
#   - "商品管理機能を実装"
#   - "決済システムを統合"
#   - "在庫管理を改善"
#   - "顧客管理システム構築"
```

### 📊 プロジェクト管理・実装ログ指示
```yaml
指示パターン:
  - "進捗を報告"
  - "実装ログを作成"
  - "タスクを管理"
  - "実装完了"
  - "動作確認できました"
  - "問題ありません"

必須参照:
  - implementation/logging/implementation-log-rules.mdc (実装ログ作成)
  - development/workflows/progress-tracking-workflow.mdc (進捗管理)

条件参照:
  - implementation/logging/implementation-log-stock.mdc (知識蓄積時)
  - templates/implementation-log-template.md (ログ作成時)
```

---

## 📁 ディレクトリ構造管理（汎用テンプレート）

### 標準構造テンプレート
```
.cursor/rules/
├── mdc-metadata-manager.mdc           # 🎯 エントリーポイント (alwaysApply: true)
├── mdc-creation-guidelines.mdc        # 📝 作成ガイド (alwaysApply: true)
├── mdc-file-storage-rules.md          # 📁 格納ルール
├── project-starter-kit.mdc           # 🚀 スターターキット (alwaysApply: true)
├── QUICKSTART.md                      # 📖 クイックスタートガイド
├── README.md                          # 📚 概要・ナビゲーション
├── templates/                         # 📋 汎用テンプレート
│   ├── extensibility-requirements-template.mdc   # 拡張性要件テンプレート
│   ├── requirements-management-meta-rules.mdc    # 要件管理メタルール
│   ├── technical-architecture-template.mdc       # 技術アーキテクチャテンプレート
│   └── implementation-plan-template.md           # 実装計画テンプレート
├── requirements/                      # 🎯 プロジェクト固有要件 (プロジェクト適応時作成)
│   ├── application-requirements.mdc   # アプリケーション要件
│   ├── technical-architecture.mdc     # 技術アーキテクチャ要件
│   ├── [domain-specific]-requirements.mdc # ドメイン固有要件
│   └── [project-specific]-requirements.mdc # プロジェクト固有要件
├── core/                              # 🏛️ 核心ルール
│   ├── cursorrules.mdc               # (alwaysApply: true)
│   ├── commit-rules.mdc              # (alwaysApply: true)
│   └── project-overview.mdc          # (alwaysApply: true)
├── development/                       # 🔧 開発関連
│   ├── guidelines/
│   │   ├── development-guidelines.mdc      # 包括開発ガイド
│   │   ├── security-guidelines.mdc        # セキュリティガイド
│   │   └── tech-stack-specific.mdc        # 技術固有ガイド
│   ├── patterns/
│   │   └── architecture-patterns.mdc      # アーキテクチャパターン
│   └── workflows/
│       ├── dependency-separation-workflow.mdc
│       ├── recommended_workflow.mdc
│       └── progress-tracking-workflow.mdc
├── implementation/                    # 🛠️ 実装関連  
│   ├── logging/
│   │   ├── implementation-log-rules.mdc  # (alwaysApply: true)
│   │   └── implementation-log-stock.mdc  # (alwaysApply: false)
│   └── quality/
└── scripts/                          # 🔧 自動化スクリプト
    ├── cursor-rules-setup.sh         # 新規プロジェクト初期化
    ├── validate-structure.sh        # 構造検証
    └── generate-report.sh           # レポート生成
```

---

## 🔧 **プロジェクト固有カスタマイズガイド**

### **カスタマイズポイント**
```yaml
必須カスタマイズ項目:
  - "[PROJECT_TYPE]": 実際のプロジェクト種別に置換
  - "[DOMAIN_SPECIFIC]": ドメイン固有技術に置換
  - "🤖 [DOMAIN_SPECIFIC]技術関連指示": プロジェクトに応じてカスタマイズ

推奨カスタマイズ項目:
  - "requirements/": プロジェクト固有要件ファイル追加
  - "development/guidelines/": 技術スタック固有ガイドライン追加
  - 指示パターンの追加・修正
```

### **カスタマイズ例**
```yaml
AI/LLM_Project:
  - "[DOMAIN_SPECIFIC]": "AI/LLM"
  - 追加要件: "llm-hybrid-system-requirements.mdc"
  - 追加ガイドライン: "prompt-engineering-guidelines.mdc"

E-commerce_Project:
  - "[DOMAIN_SPECIFIC]": "E-commerce"
  - 追加要件: "payment-integration-requirements.mdc"
  - 追加ガイドライン: "payment-security-guidelines.mdc"

Mobile_App_Project:
  - "[DOMAIN_SPECIFIC]": "Mobile"
  - 追加要件: "cross-platform-requirements.mdc"
  - 追加ガイドライン: "mobile-ui-guidelines.mdc"
```

---

## 🔄 継続的改善サイクル（汎用フレームワーク）

### 改善プロセス管理
```yaml
continuous_improvement_cycle:
  step_1_monitoring:
    - "実装進捗・課題の継続監視"
    - "ユーザーフィードバック収集"
    - "技術進化・要件変化の追跡"
    
  step_2_analysis:
    - "問題根本原因分析"
    - "改善機会の特定"
    - "影響度・優先度評価"
    
  step_3_planning:
    - "改善計画の策定"
    - "要件・ルール更新案作成"
    - "実装スケジュール調整"
    
  step_4_implementation:
    - "要件・ルール更新実施"
    - "関連ファイル同期更新"
    - "エントリーポイント参照制御更新"
    
  step_5_validation:
    - "改善効果測定"
    - "副作用・影響確認"
    - "継続監視体制確立"
```

### エントリーポイント司令塔責任
```typescript
// ✅ 司令塔機能による継続改善統制
interface CommandCenterResponsibilities {
  reference_control: {
    dynamic_routing: 'ユーザー指示に基づく最適ルール誘導';
    load_balancing: '参照負荷分散・効率最適化';
    version_management: 'ルールバージョン統制・互換性保証';
  };
  
  evolution_management: {
    requirement_updates: '実装進化に応じた要件更新統制';
    rule_synchronization: '関連ルール間の一貫性保証';
    backward_compatibility: '既存プロセスとの互換性維持';
  };
  
  quality_assurance: {
    consistency_monitoring: 'ルール間矛盾・重複検出';
    effectiveness_tracking: 'ルール効果測定・改善提案';
    user_experience: 'ルール参照体験の継続最適化';
  };
}
```

---

## 📚 関連ファイル（テンプレート）

### 必須関連ファイル
- [mdc-creation-guidelines.mdc](./mdc-creation-guidelines.mdc): .mdcファイル作成ガイドライン
- [mdc-file-storage-rules.md](./mdc-file-storage-rules.md): ファイル格納場所管理
- [project-starter-kit.mdc](./project-starter-kit.mdc): 新規プロジェクト用スターターキット

### 汎用テンプレートファイル
- [templates/extensibility-requirements-template.mdc](./templates/extensibility-requirements-template.mdc): 拡張性要件テンプレート
- [templates/requirements-management-meta-rules.mdc](./templates/requirements-management-meta-rules.mdc): 要件管理メタルール
- [templates/technical-architecture-template.mdc](./templates/technical-architecture-template.mdc): 技術アーキテクチャテンプレート
- [templates/implementation-plan-template.md](./templates/implementation-plan-template.md): 実装計画テンプレート

---

## 📝 テンプレート使用方法

### **Step 1: プロジェクト固有ファイル名に変更**
```bash
cp mdc-metadata-manager-generic.mdc mdc-metadata-manager.mdc
```

### **Step 2: プロジェクト固有内容に置換**
```bash
# プロジェクト種別の置換
sed -i 's/\[PROJECT_TYPE\]/your-project-type/g' mdc-metadata-manager.mdc

# ドメイン固有技術の置換
sed -i 's/\[DOMAIN_SPECIFIC\]/your-domain/g' mdc-metadata-manager.mdc

# 具体的な指示パターンの追加・修正
# プロジェクト固有要件ファイルの追加・参照設定
```

### **Step 3: プロジェクト固有要件定義作成**
```bash
# テンプレートから要件定義作成
cp templates/extensibility-requirements-template.mdc requirements/extensibility-requirements.mdc
cp templates/requirements-management-meta-rules.mdc requirements/requirements-management-meta-rules.mdc

# プロジェクト固有情報で置換・カスタマイズ
```

---

**🎯 重要**: このファイルは汎用テンプレートです。必ずプロジェクト固有の内容にカスタマイズしてから使用してください。カスタマイズ後は、プロジェクトの成長に応じて継続的に更新・進化させるリビングドキュメントとして管理してください。
description:
globs:
alwaysApply: false
---
