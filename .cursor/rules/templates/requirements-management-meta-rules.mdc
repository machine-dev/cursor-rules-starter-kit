# 要件定義管理メタルール（汎用版）

## 📋 メタデータ
```yaml
title: "要件定義管理メタルール（汎用版）"
version: "2.0.0"  # 実装プラン・進捗管理項目追加
created: "2025-07-22"
updated: "2025-07-22"
status: "active"
priority: "critical"
category: "meta-governance"
scope: "requirements-management"
enforcement: "mandatory"
applicable_to: "all_projects"
```

## 🚨 **Version 2.0.0 主要変更**

### **📋 実装プラン・進捗管理項目必須化**
```yaml
implementation_planning_requirements:
  mandatory_sections:
    - title: "🚀 実装ロードマップ"
      purpose: "Phase別実装計画の明確化"
      required_elements:
        - "Phase別優先度・工数見積もり"
        - "依存関係・前提条件"
        - "リスク評価・対策"
        - "成功基準・測定指標"
    
    - title: "📊 実装進捗トラッキング"
      purpose: "実装状況の透明性確保"
      required_elements:
        - "Phase別実装状況（未開始/進行中/完了）"
        - "実装完了日・所要時間記録"
        - "遭遇した課題・解決方法"
        - "次期フェーズへの引き継ぎ事項"
    
    - title: "🎯 品質保証・検証項目"
      purpose: "実装品質の担保"
      required_elements:
        - "機能要件達成度チェックリスト"
        - "非機能要件（性能・セキュリティ）検証"
        - "回帰テスト・互換性確認"
        - "ユーザー受入基準"

  update_timing:
    - "要件定義新規作成時：初期プラン記載必須"
    - "Phase完了時：進捗・結果更新必須"
    - "要件変更時：影響度評価・プラン修正必須"
    - "月次レビュー：全体進捗・課題整理必須"
```

### **🔄 Version管理強化ルール**
```yaml
version_management_enhancement:
  semantic_versioning:
    major: "X.0.0 - アーキテクチャ・根本機能変更"
    minor: "X.Y.0 - 新機能追加・拡張性向上"
    patch: "X.Y.Z - バグ修正・細部改善"
    
  mandatory_metadata:
    - "version_history: 変更理由・影響範囲"
    - "compatibility_impact: 既存機能への影響度"
    - "implementation_status: 各要件の実装状況"
    - "next_version_plan: 次期バージョン予定"
```

## 🎯 **メタルール概要**

### **目的**
プロジェクトにおける**要件定義の継続的管理・更新・運用**の標準化とガバナンス確立

### **適用範囲**
- `.cursor/rules/requirements/` 配下の全要件定義ファイル
- 大規模改修・機能追加時の要件定義更新
- 要件履歴管理・トレーサビリティ確保
- 実装プラン・進捗管理項目

---

## 🚨 **大規模改修時の強制適用ルール**

### **適用条件（必須チェック）**
```yaml
mandatory_application_triggers:
  scope_based:
    - "修正ファイル数 ≥ 5個"
    - "新規機能追加（既存アーキテクチャ拡張）"
    - "外部API・データソース統合"
    - "セキュリティモデル変更"
    
  time_based:
    - "実装予定期間 ≥ 1週間"
    - "複数Phase実装計画"
    - "チーム協業が必要な作業"
    
  complexity_based:
    - "新技術スタック導入"
    - "既存コンポーネント大幅改修"
    - "性能・スケーラビリティ要件変更"
    - "ユーザーインターフェース大幅変更"
```

### **強制実行プロセス**
```yaml
pre_implementation_requirements:
  step_1_analysis:
    - "現行要件定義ファイル全読み込み"
    - "変更影響範囲の詳細分析"
    - "関連要件間の依存関係確認"
    
  step_2_planning:
    - "実装ロードマップ策定（Phase分割）"
    - "リスク評価・対策立案"
    - "品質保証計画策定"
    
  step_3_documentation:
    - "要件定義更新・バージョンアップ"
    - "実装プラン文書化"
    - "承認プロセス実行"

during_implementation_requirements:
  progress_tracking:
    - "Phase完了時：進捗状況更新必須"
    - "課題発生時：影響評価・対策記録必須"
    - "計画変更時：要件定義同期更新必須"
    
  quality_assurance:
    - "各Phase：品質チェックリスト実行"
    - "統合テスト：要件適合性確認"
    - "受入テスト：ユーザー承認記録"

post_implementation_requirements:
  final_documentation:
    - "実装結果・成果物文書化"
    - "教訓・改善点記録"
    - "次期実装への引き継ぎ事項整理"
    
  knowledge_management:
    - "ベストプラクティス抽出"
    - "再利用可能パターン特定"
    - "チーム知識ベース更新"
```

---

## 📚 **履歴保持・変更管理ルール**

### **🔒 履歴保持方式（絶対厳守）**
```yaml
history_preservation_rules:
  comment_out_method:
    principle: "削除禁止・コメントアウトによる履歴保持"
    format: |
      # ❌ 削除対象（v[VERSION] [YYYY-MM-DD] [理由]）
      # [削除される内容をコメントアウトで保持]
      
      # ✅ 新規追加（v[VERSION] [YYYY-MM-DD] [理由]）
      [新しい内容]
    
  version_tracking:
    - "変更理由の必須記載"
    - "変更日時の必須記録"
    - "影響範囲の明確化"
    - "承認者・実装者の記録"

metadata_management:
  version_info:
    - "semantic_version: X.Y.Z"
    - "change_summary: 変更概要"
    - "breaking_changes: 破壊的変更一覧"
    - "migration_notes: 移行手順・注意事項"
    
  traceability:
    - "related_requirements: 関連要件ファイル一覧"
    - "implementation_files: 実装対象ファイル一覧"
    - "test_scenarios: テストシナリオ・検証項目"
    - "approval_history: 承認履歴・決定プロセス"
```

### **🔄 バージョン管理・更新プロセス**
```yaml
version_control_process:
  minor_changes:
    trigger: "機能追加・改善・バグ修正"
    process:
      - "Y値インクリメント（X.Y.Z → X.Y+1.0）"
      - "変更内容をコメント付きで追記"
      - "既存内容は保持・コメントアウト時のみ"
      
  major_changes:
    trigger: "アーキテクチャ変更・根本的設計変更"
    process:
      - "X値インクリメント（X.Y.Z → X+1.0.0）"
      - "破壊的変更影響の詳細分析"
      - "移行計画・後方互換性検討"
      - "ステークホルダー承認必須"

  emergency_patches:
    trigger: "緊急バグ修正・セキュリティ対応"
    process:
      - "Z値インクリメント（X.Y.Z → X.Y.Z+1）"
      - "迅速対応・事後詳細分析"
      - "影響範囲最小化・リスク評価"
```

---

## 🛡️ **品質保証・ガバナンス**

### **要件品質基準**
```yaml
quality_standards:
  completeness:
    - "実装に必要な情報が全て含まれている"
    - "曖昧性・不明確な表現がない"
    - "関連要件との整合性が取れている"
    
  measurability:
    - "成功基準が定量的に定義されている"
    - "検証方法・テスト手順が明確"
    - "性能・品質目標が数値化されている"
    
  maintainability:
    - "継続的更新・拡張が容易"
    - "構造化・標準化されたフォーマット"
    - "関連情報へのリンク・参照が適切"
```

### **ガバナンス体制**
```yaml
governance_framework:
  roles_responsibilities:
    requirements_owner:
      - "要件定義の一次責任者"
      - "変更管理・承認権限"
      - "ステークホルダー調整"
      
    technical_lead:
      - "技術実装可能性評価"
      - "アーキテクチャ整合性確認"
      - "技術リスク評価・対策"
      
    project_manager:
      - "全体スケジュール管理"
      - "リソース調整・優先度決定"
      - "進捗監視・報告"

  review_approval_process:
    - "変更提案・影響分析"
    - "技術レビュー・実装評価"
    - "ステークホルダー承認"
    - "実装実行・結果確認"
```

---

## 📊 **継続改善・測定指標**

### **要件管理効果測定**
```yaml
effectiveness_metrics:
  process_efficiency:
    - "要件変更から実装完了までの時間"
    - "要件不備による手戻り発生率"
    - "実装と要件の適合度"
    
  quality_indicators:
    - "要件カバレッジ率"
    - "テスト通過率"
    - "ユーザー受入成功率"
    
  knowledge_accumulation:
    - "再利用可能パターン抽出数"
    - "ベストプラクティス文書化数"
    - "チーム学習効果測定"
```

### **継続改善サイクル**
```yaml
improvement_cycle:
  quarterly_review:
    - "要件管理プロセス効果分析"
    - "ボトルネック・問題点特定"
    - "改善施策立案・実行"
    
  annual_assessment:
    - "ガバナンス体制見直し"
    - "ツール・手法の最新化"
    - "業界ベストプラクティス取り込み"
```

---

## 🎯 **実装ガイド・チェックリスト**

### **要件定義作成時チェックリスト**
```yaml
creation_checklist:
  metadata_setup:
    - [ ] "タイトル・バージョン・日付設定"
    - [ ] "適用範囲・優先度明確化"
    - [ ] "関連要件・依存関係特定"
    
  content_quality:
    - [ ] "実装ロードマップ策定完了"
    - [ ] "リスク評価・対策立案完了"
    - [ ] "成功基準・測定指標定義完了"
    - [ ] "品質保証計画策定完了"
    
  review_approval:
    - [ ] "技術レビュー実施・承認取得"
    - [ ] "ステークホルダー合意形成"
    - [ ] "実装チーム理解・合意確認"
```

### **要件更新時チェックリスト**
```yaml
update_checklist:
  impact_analysis:
    - [ ] "変更影響範囲分析完了"
    - [ ] "関連要件との整合性確認"
    - [ ] "実装コスト・リスク評価"
    
  documentation:
    - [ ] "履歴保持ルール準拠"
    - [ ] "バージョン管理適切実行"
    - [ ] "変更理由・承認記録"
    
  communication:
    - [ ] "変更内容チーム共有"
    - [ ] "実装計画調整・合意"
    - [ ] "テスト計画更新・確認"
```

---

## 📝 **関連テンプレート・リソース**

### **テンプレートファイル**
- `extensibility-requirements-template.mdc`: 拡張性要件テンプレート
- `technical-architecture-template.mdc`: 技術アーキテクチャ要件テンプレート
- `implementation-plan-template.md`: 実装計画テンプレート

### **参考リソース**
- 業界標準要件管理手法
- アジャイル開発要件管理ベストプラクティス
- 大規模システム要件ガバナンス事例

---

**🎯 重要**: このメタルールは、プロジェクトの要件管理品質向上と継続的改善を目的とした包括的なガイドラインです。プロジェクト特性に応じて適切にカスタマイズし、効果的な要件管理体制を構築してください。
description:
globs:
alwaysApply: false
---
