# 🚀 Cursor Rules Project Starter Kit

**策定日**: 2025年7月20日  
**適用範囲**: 全ての新規プロジェクト導入  
**目的**: 動的参照システムの迅速な導入・運用開始

## 🎯 このスターターキットの目的

### 迅速な導入
- **ワンクリック導入**: 複雑な設定なしでルールシステム開始
- **プロジェクト特化**: 変動要素に応じた自動カスタマイズ
- **即座運用**: コピペ後すぐにCursorルールが機能

### スケーラブルな基盤
- **最小構成**: 必要最小限のファイルでスタート
- **拡張容易**: プロジェクト成長に応じた段階的追加
- **保守効率**: 一元管理による簡単メンテナンス

### 包括的な開発支援
- **実装ログシステム**: 進捗記録と知識蓄積の自動化
- **動的参照制御**: 状況に応じた適切なルール適用
- **CI/CD統合**: 継続的品質管理とレポート生成

---

## 📋 変動要素とカスタマイズ対応

### 🔧 **変動要素の定義**
```yaml
プロジェクト基本情報:
  - 開発するもの: [Webアプリ/API/ライブラリ/ツール等]
  - 目的: [機能・ビジネス目標]
  - 開発期間: [短期/中期/長期]

技術スタック:
  - フロントエンド: [React/Vue/Angular/Next.js等]
  - バックエンド: [Node.js/Python/Go/Java等]
  - データベース: [PostgreSQL/MongoDB/Supabase等]
  - インフラ: [Vercel/AWS/Docker等]
  - AI/LLM: [OpenAI/Anthropic/Local等]

チーム構成:
  - チームサイズ: [1-3人/4-10人/10人以上]
  - 経験レベル: [初級/中級/上級/混合]
  - 開発体制: [個人/小チーム/大規模チーム]

リポジトリ情報:
  - GitHubリポジトリ: [owner/repo-name]
  - ブランチ戦略: [GitHub Flow/Git Flow/独自]
  - CI/CD: [GitHub Actions/Vercel/独自]
```

### 🎯 **カスタマイズ戦略**
```yaml
基本ルール（全プロジェクト共通）:
  - エントリーポイント管理
  - ファイル作成ガイドライン
  - 格納場所ルール
  - Git管理ルール

技術スタック特化ルール:
  - フロントエンド固有: React/Next.js/Vue等
  - バックエンド固有: API/サーバー等
  - データベース固有: SQL/NoSQL等
  - AI/LLM固有: プロンプト/モデル等

プロジェクト規模特化ルール:
  - 小規模: 軽量・シンプルルール
  - 中規模: 標準的な品質管理
  - 大規模: 厳格な統制・監査
```

---

## 🏗️ スターターキット構成

### 📁 **最小必要ファイル構成**
```
.cursor/rules/
├── mdc-metadata-manager.mdc           # エントリーポイント（カスタマイズ版）
├── mdc-creation-guidelines.mdc        # 作成ガイドライン（汎用版）
├── mdc-file-storage-rules.md          # 格納ルール（汎用版）
├── project-starter-kit.mdc           # 本ファイル
├── core/                              # 核心ルール
│   ├── cursorrules.mdc               # Cursor基本動作（カスタマイズ版）
│   ├── project-overview.mdc          # プロジェクト概要（テンプレート）
│   └── commit-rules.mdc              # Git管理（汎用版）
├── implementation/                    # 実装関連
│   └── logging/                       # 実装ログシステム
│       ├── implementation-log-rules.mdc    # ログ作成ルール
│       └── implementation-log-stock.mdc    # 知識蓄積管理
└── templates/                         # テンプレート集
    ├── development-workflows/         # 開発ワークフロー
    ├── tech-stack-specific/          # 技術固有ルール
    ├── team-structure/               # チーム構成対応
    └── implementation-log-template.md # 実装ログテンプレート
```

### 🔧 **自動生成スクリプト**
```bash
#!/bin/bash
# cursor-rules-setup.sh

PROJECT_NAME=""
TECH_STACK=""
TEAM_SIZE=""
REPO_URL=""

# 設定ファイル読み込み
source .cursor-project-config

# 基本ディレクトリ作成
mkdir -p .cursor/rules/{core,development,implementation,system,metadata}

# エントリーポイント生成
generate_entry_point() {
    cat > .cursor/rules/mdc-metadata-manager.mdc << EOF
---
description: ${PROJECT_NAME}プロジェクトのCursorルール動的参照システム・エントリーポイント
globs: ["*"]
alwaysApply: true
---

# 🎯 ${PROJECT_NAME} - Cursorルール管理システム

**プロジェクト**: ${PROJECT_NAME}
**技術スタック**: ${TECH_STACK}
**チーム**: ${TEAM_SIZE}
**リポジトリ**: ${REPO_URL}

[エントリーポイントの具体的内容をテンプレートから生成]
EOF
}

# プロジェクト概要生成
generate_project_overview() {
    cat > .cursor/rules/core/project-overview.mdc << EOF
---
description: ${PROJECT_NAME}プロジェクトの概要、目標、技術スタック、制約条件を定義
globs: ["*"]
alwaysApply: true
---

# ${PROJECT_NAME} プロジェクト概要

## プロジェクト情報
- **プロジェクト名**: ${PROJECT_NAME}
- **目標**: [プロジェクト目標を記述]
- **技術スタック**: ${TECH_STACK}
- **開発期間**: [期間を記述]
- **リポジトリ**: ${REPO_URL}

[プロジェクト固有の詳細をテンプレートから生成]
EOF
}

# 実行
generate_entry_point
generate_project_overview
# [その他のファイル生成]

echo "✅ Cursorルールシステムが正常に初期化されました"
echo "📝 次のステップ:"
echo "1. .cursor/rules/core/project-overview.mdc を編集"
echo "2. 技術スタック固有ルールの有効化"
echo "3. チーム向けルールの設定"
```

---

## 📋 導入プロセス

### Phase 1: プロジェクト設定定義
```markdown
### 1.1 設定ファイル作成
```bash
# .cursor-project-config作成
cat > .cursor-project-config << 'EOF'
# Cursor Rules Project Configuration
PROJECT_NAME="MyAwesomeProject"
PROJECT_TYPE="web-app"               # web-app/api/library/tool
TECH_STACK="Next.js,Supabase,Vercel" # カンマ区切り
TEAM_SIZE="small"                     # small/medium/large
REPO_URL="https://github.com/owner/repo"
DEVELOPMENT_PERIOD="3months"          # 1month/3months/6months/ongoing

# 技術スタック詳細
FRONTEND="Next.js"
BACKEND="Supabase"
DATABASE="PostgreSQL"
DEPLOYMENT="Vercel"
AI_LLM="OpenAI"

# チーム設定
TEAM_EXPERIENCE="mixed"               # beginner/intermediate/advanced/mixed
DEVELOPMENT_STYLE="agile"             # agile/waterfall/custom
BRANCH_STRATEGY="github-flow"         # github-flow/git-flow/custom
EOF
```

### 1.2 必要性の確認
- [ ] プロジェクトタイプの特定
- [ ] 技術スタックの確定
- [ ] チーム構成の把握
- [ ] 開発期間・スケジュールの確認
```

### Phase 2: 自動初期化実行
```markdown
### 2.1 スターターキット実行
```bash
# スターターキット実行
curl -sSL https://raw.githubusercontent.com/cursor-rules/starter-kit/main/setup.sh | bash

# または手動実行
./scripts/cursor-rules-setup.sh
```

### 2.2 生成確認
```bash
# 生成されたファイル確認
tree .cursor/rules/

# エントリーポイント確認
cat .cursor/rules/mdc-metadata-manager.mdc

# 基本設定確認
code .cursor/rules/core/project-overview.mdc
```
```

### Phase 3: プロジェクト特化カスタマイズ
```markdown
### 3.1 プロジェクト概要編集
- [ ] プロジェクト目標の詳細記述
- [ ] 技術的制約の追加
- [ ] 特別な要件の記載

### 3.2 技術スタック特化ルール有効化
```bash
# 使用技術に応じてルール有効化
./scripts/enable-tech-rules.sh next.js supabase vercel

# AI/LLMルール有効化（必要に応じて）
./scripts/enable-ai-rules.sh openai
```

### 3.3 チーム特化ルール設定
```bash
# チームサイズに応じた設定
./scripts/setup-team-rules.sh small

# 経験レベルに応じた設定
./scripts/setup-experience-rules.sh mixed
```
```

---

## 🔧 CI/CD統合・自動運用システム

### GitHub Actions統合
```yaml
# .github/workflows/cursor-rules-check.yml
name: Cursor Rules Quality Check

on:
  push:
    paths:
      - '.cursor/rules/**'
  pull_request:
    paths:
      - '.cursor/rules/**'

jobs:
  rules-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate Cursor Rules Structure
        run: |
          # ディレクトリ構造チェック
          bash .cursor/rules/scripts/validate-structure.sh
          
          # Frontmatter完全性チェック
          bash .cursor/rules/scripts/validate-frontmatter.sh
          
          # 参照整合性チェック
          bash .cursor/rules/scripts/validate-references.sh
          
      - name: Generate Rules Report
        run: |
          # ルール統計レポート生成
          bash .cursor/rules/scripts/generate-report.sh > rules-report.md
          
      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('rules-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 📋 Cursor Rules Quality Report\n\n${report}`
            });

  auto-update:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Auto-update Entry Point
        run: |
          # エントリーポイント自動更新
          bash .cursor/rules/scripts/auto-update-entry-point.sh
          
      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .cursor/rules/mdc-metadata-manager.mdc
          git commit -m "chore: auto-update entry point" || exit 0
          git push
```

### 自動運用スクリプト集
```bash
# .cursor/rules/scripts/validate-structure.sh
#!/bin/bash
echo "🔍 Cursorルール構造チェック開始..."

# 必須ファイル存在チェック
required_files=(
  ".cursor/rules/mdc-metadata-manager.mdc"
  ".cursor/rules/mdc-creation-guidelines.mdc" 
  ".cursor/rules/mdc-file-storage-rules.md"
  ".cursor/rules/core/cursorrules.mdc"
  ".cursor/rules/core/project-overview.mdc"
  ".cursor/rules/core/commit-rules.mdc"
)

for file in "${required_files[@]}"; do
  if [[ ! -f "$file" ]]; then
    echo "❌ 必須ファイルが見つかりません: $file"
    exit 1
  fi
done

echo "✅ 必須ファイル存在確認完了"

# alwaysApply設定チェック
always_apply_count=$(grep -r "alwaysApply: true" .cursor/rules/ --include="*.mdc" | wc -l)
if [[ $always_apply_count -gt 10 ]]; then
  echo "⚠️ 警告: alwaysApply: trueが多すぎます ($always_apply_count 個)"
  echo "パフォーマンスに影響する可能性があります"
fi

echo "✅ 構造チェック完了"
```

```bash
# .cursor/rules/scripts/validate-frontmatter.sh
#!/bin/bash
echo "📝 Frontmatter完全性チェック開始..."

errors=0

for file in $(find .cursor/rules -name "*.mdc"); do
  echo "チェック中: $file"
  
  # description存在チェック
  if ! head -10 "$file" | grep -q "description:"; then
    echo "❌ description不足: $file"
    ((errors++))
  fi
  
  # globs存在チェック
  if ! head -10 "$file" | grep -q "globs:"; then
    echo "❌ globs不足: $file" 
    ((errors++))
  fi
  
  # alwaysApply存在チェック
  if ! head -10 "$file" | grep -q "alwaysApply:"; then
    echo "❌ alwaysApply不足: $file"
    ((errors++))
  fi
done

if [[ $errors -gt 0 ]]; then
  echo "❌ Frontmatterエラー: $errors 個"
  exit 1
fi

echo "✅ Frontmatterチェック完了"
```

```bash
# .cursor/rules/scripts/generate-report.sh
#!/bin/bash
echo "# 📊 Cursor Rules システム状況"
echo ""
echo "**生成日時**: $(date)"
echo ""

echo "## 📋 基本統計"
total_mdc=$(find .cursor/rules -name "*.mdc" | wc -l)
always_apply_true=$(grep -r "alwaysApply: true" .cursor/rules/ --include="*.mdc" | wc -l)
always_apply_false=$(grep -r "alwaysApply: false" .cursor/rules/ --include="*.mdc" | wc -l)

echo "- 総.mdcファイル数: $total_mdc"
echo "- 常時参照(alwaysApply: true): $always_apply_true"
echo "- 動的参照(alwaysApply: false): $always_apply_false"
echo ""

echo "## 🎯 エントリーポイント統制状況"
if [[ -f ".cursor/rules/mdc-metadata-manager.mdc" ]]; then
  echo "- ✅ エントリーポイント正常"
else
  echo "- ❌ エントリーポイント不足"
fi

echo ""
echo "## 📁 ディレクトリ構造"
tree .cursor/rules/ || ls -la .cursor/rules/
```

---

## 📚 テンプレート集

### Next.js + Supabase特化テンプレート
```markdown
# templates/tech-stack/nextjs-supabase.mdc
---
description: Next.js + Supabase技術スタック固有の開発ルール・ベストプラクティス
globs: ["app/**/*", "components/**/*", "lib/**/*", "supabase/**/*"]
alwaysApply: false
---

# Next.js + Supabase 開発ルール

## 🎯 技術スタック固有要件

### Next.js要件
- App Router使用必須
- Server Componentsの積極活用
- Client Componentsは最小限に

### Supabase要件  
- Row Level Security (RLS)必須
- 型安全性の確保
- リアルタイム機能の適切な使用

## 📋 開発ガイドライン

### ファイル構成
```
app/                  # Next.js App Router
├── (auth)/          # 認証関連ページ
├── dashboard/       # ダッシュボード
└── api/            # API Routes

components/          # 再利用可能コンポーネント
├── ui/             # 基本UIコンポーネント
└── forms/          # フォーム専用

lib/                # ユーティリティ・設定
├── supabase/       # Supabase設定
└── utils/          # ヘルパー関数

supabase/           # Supabase関連
├── migrations/     # データベースマイグレーション
└── functions/      # Edge Functions
```

### 実装パターン
[具体的な実装パターンを記述]
```

### チーム規模別テンプレート
```markdown
# templates/team-structure/small-team.mdc
---
description: 小規模チーム（1-3人）向けの軽量開発ルール・シンプルワークフロー
globs: ["*"]
alwaysApply: false
---

# 小規模チーム開発ルール

## 🎯 小規模チーム特化要件

### 軽量プロセス
- 過度なドキュメントは不要
- 直接コミュニケーション重視
- 迅速な意思決定

### シンプルワークフロー
- GitHub Flow採用
- Feature branchは短期間
- 迅速なマージ・デプロイ

[小規模チーム向けの具体的ルールを記述]
```

---

## 🔄 運用・メンテナンス

### 定期メンテナンス自動化
```bash
# .cursor/rules/scripts/weekly-maintenance.sh
#!/bin/bash
echo "📅 週次メンテナンス実行中..."

# 不要ファイル削除
find .cursor/rules -name "temp-*.mdc" -delete
find .cursor/rules -name "draft-*.mdc" -delete

# エントリーポイント更新
bash .cursor/rules/scripts/auto-update-entry-point.sh

# 統計レポート生成
bash .cursor/rules/scripts/generate-report.sh > weekly-rules-report.md

echo "✅ 週次メンテナンス完了"
```

### プロジェクト成長対応
```yaml
成長段階別アップグレード:
  
  初期段階（1-2ヶ月）:
    - 基本ルールのみ運用
    - 最小限の品質チェック
    
  成長段階（3-6ヶ月）:
    - 技術固有ルール追加
    - CI/CD統合強化
    - チームルール拡充
    
  成熟段階（6ヶ月以上）:
    - 包括的品質管理
    - 高度な自動化
    - カスタムルール開発
```

---

## ✅ 導入チェックリスト

### 導入前準備
- [ ] プロジェクト基本情報の整理
- [ ] 技術スタックの確定
- [ ] チーム構成・役割の明確化
- [ ] GitHubリポジトリの準備

### 初期導入
- [ ] スターターキット実行
- [ ] 基本ファイル生成確認
- [ ] プロジェクト概要のカスタマイズ
- [ ] 技術スタック特化ルール有効化

### CI/CD統合
- [ ] GitHub Actions設定
- [ ] 自動チェックスクリプト配置
- [ ] エラー通知設定
- [ ] レポート自動生成設定

### チーム導入
- [ ] チームメンバーへの説明
- [ ] 運用ルールの共有
- [ ] フィードバック収集体制
- [ ] 継続的改善プロセス

---

## 🎯 期待される効果

### ✅ **導入効率化**
- **設定時間**: 従来の数時間 → 10分以内
- **習得コスト**: 大幅削減（テンプレート・ガイド完備）
- **エラー減少**: 設定ミス・構成エラーの撲滅

### ✅ **品質保証**
- **一貫性**: 全プロジェクトでの統一品質
- **ベストプラクティス**: 自動的な良い慣行の適用
- **メンテナンス性**: 長期的な保守容易性

### ✅ **スケーラビリティ**
- **プロジェクト対応**: あらゆる規模・種類に対応
- **技術変化**: 新技術への迅速な対応
- **チーム成長**: 人数・スキル変化への柔軟性

---

## 📝 更新履歴

| 日付 | 更新内容 | 影響範囲 | 更新者 |
|------|----------|----------|--------|
| 2025-07-20 | スターターキット初版作成 | 新規導入プロセス全体 | AI Assistant |

**次回見直し予定**: 2025-08-20  
**管理者**: プロジェクト管理者  
**適用対象**: 全新規プロジェクト

---

**🚀 重要**: このスターターキットは、Cursorルール動的参照システムの迅速導入を目的としています。プロジェクト開始時に本ルールに従って初期化することで、即座に高品質な開発環境を構築できます。
description:
globs:
alwaysApply: false
---

### 実装ログシステム統合
```bash
# 実装ログディレクトリ作成
mkdir -p .cursor/rules/implementation/logging

# 実装ログルール生成
cat > .cursor/rules/implementation/logging/implementation-log-rules.mdc << EOF
---
description: ${PROJECT_NAME}プロジェクト用実装ログ作成・管理ルール
globs: ["*"]
alwaysApply: true
---

# ${PROJECT_NAME} - 実装ログ作成ルール

## 🎯 実装ログの目的

### ${PROJECT_NAME}での実装記録
- **進捗の可視化**: 開発プロセスの透明性確保
- **知識の蓄積**: 解決手法・パターンの体系化
- **品質の向上**: 振り返りによる継続的改善

## 📋 実装完了の判定基準

### 実装完了条件
- エラーが完全になくなった状態
- ユーザーから動作確認・承認が取れた場合
- 機能が期待通りに動作することが確認された場合

## 🔄 実装ログの2軸構成

### 1. フロー（Flow）- 日次実装ログ
**目的**: その日の実装過程を時系列で記録
**形式**: \`IMPLEMENTATION_LOG_YYYY-MM-DD.md\`

**構成テンプレート**:
\`\`\`markdown
# ${PROJECT_NAME} 実装ログ - YYYY年MM月DD日

## 実装項目: [項目名]
**開始時刻**: HH:MM  
**完了時刻**: HH:MM  
**所要時間**: X時間Y分

### 実装概要
- 目的: [何を実装したか]
- 対象ファイル: [変更したファイル一覧]
- 主な変更内容: [変更の概要]

### 実装プロセス
1. **調査・分析フェーズ**
   - 問題の特定
   - 既存コードの調査
   - 解決方針の決定

2. **実装フェーズ**
   - 具体的な実装手順
   - 遭遇した問題と解決方法
   - コードの変更詳細

3. **テスト・検証フェーズ**
   - 動作確認方法
   - 発生したエラーと対処
   - 最終的な動作確認結果

### 技術的な学び
- 新しく学んだ技術・概念
- 効果的だった解決アプローチ
- 今後活用できる知識

### 改善点・反省点
- より効率的にできたであろう方法
- 見落としていた点
- 次回に活かすべき教訓
\`\`\`

### 2. ストック（Stock）- 知識蓄積システム
**目的**: 日々の学びを一般化してCursorルールに昇華
**形式**: Cursorルールファイルへの追加提案

**プロセス**:
1. 実装完了後、学びを抽象化
2. Cursorルールとして有効な内容を特定
3. ユーザーに提案・承認を求める
4. 承認後、適切なルールファイルに追加

## ⚡ 自動実行タイミング

### 実装ログ作成の自動実行
- ユーザーが「動作確認できました」「問題ありません」「完了しました」等の承認を示した場合
- エラーが解消され、機能が正常に動作することが確認された場合
- 開発項目が完全に完了した場合

### 実行プロセス
1. **フロー（日次ログ）**: 必ず作成
2. **ストック（ルール提案）**: 学びがある場合のみ提案
3. **ユーザー承認**: Cursorルールへの追加は承認後のみ

---

**📝 ${PROJECT_NAME} 実装ログシステム**: $(date +%Y-%m-%d)自動生成
EOF

# 実装ログストック管理ルール生成
cat > .cursor/rules/implementation/logging/implementation-log-stock.mdc << EOF
---
description: ${PROJECT_NAME}プロジェクト用実装ログの知識ストック化・Cursorルール昇華管理
globs: ["*.mdc", "*.md"]
alwaysApply: false
---

# ${PROJECT_NAME} - 実装ログ知識ストック管理

## 🎯 知識ストック化の目的

### ${PROJECT_NAME}での知識体系化
- **学習の定着**: 個別経験を一般化された知識に変換
- **チーム共有**: 個人の学びをチーム全体の資産に
- **品質向上**: 蓄積された知識による開発効率・品質の向上

## 📚 ストック化プロセス

### Phase 1: 学びの抽出
\`\`\`yaml
対象となる学び:
  - 新しい技術・概念の習得
  - 効果的な解決アプローチの発見
  - よくある問題と解決パターン
  - ${TECH_STACK}固有のベストプラクティス
  - ${TEAM_SIZE}チーム向け開発手法
\`\`\`

### Phase 2: 一般化・抽象化
\`\`\`yaml
抽象化の観点:
  - プロジェクト固有 → 一般的な原則
  - 具体的手順 → 再利用可能なパターン
  - 個人経験 → チーム標準手法
  - 技術詳細 → 設計原則
\`\`\`

### Phase 3: Cursorルール提案
\`\`\`markdown
## 新しいCursorルール提案

### 学びの背景
[今回の実装で得られた具体的な経験]

### 抽象化されたルール
[一般的な開発に適用可能な形に抽象化されたルール]

### 適用場面
[このルールが有効な場面・条件]

### 期待される効果
[このルールを適用することで得られる効果]

### 提案先ファイル
[追加先のCursorルールファイル名]
\`\`\`

## 🔄 ${PROJECT_NAME}固有ストック戦略

### 技術スタック特化ストック
\`\`\`yaml
${TECH_STACK}関連:
  - フロントエンド: ${FRONTEND}のベストプラクティス
  - バックエンド: ${BACKEND}の実装パターン
  - インフラ: ${DEPLOYMENT}の運用知識
\`\`\`

### チーム規模対応ストック
\`\`\`yaml
${TEAM_SIZE}チーム向け:
  - コミュニケーション効率化
  - 作業分担最適化
  - コードレビュー改善
\`\`\`

## 📊 ストック管理・活用

### 定期レビュー
- **週次**: 蓄積された学びの確認
- **月次**: Cursorルール提案の整理
- **四半期**: ストック戦略の見直し

### 品質管理
- **重複チェック**: 既存ルールとの重複回避
- **一貫性確認**: プロジェクト全体との整合性
- **実用性検証**: 実際の開発での有効性確認

---

**📚 ${PROJECT_NAME} 知識ストックシステム**: $(date +%Y-%m-%d)自動生成
EOF
```

log_success "実装ログシステムを生成しました"

# 実装ログテンプレート追加
cat > .cursor/rules/templates/implementation-log-template.md << EOF
# ${PROJECT_NAME} 実装ログ - $(date +%Y年%m月%d日)

## 実装項目: [具体的な実装内容]
**開始時刻**: $(date +%H:%M)  
**完了時刻**: [完了時に記入]  
**所要時間**: [所要時間を記入]

## 実装概要
- **目的**: [何を達成しようとしたか]
- **対象ファイル**: [変更したファイル一覧]
- **主な変更内容**: [変更の概要]

## 実装プロセス

### 1. 調査・分析フェーズ
- **問題の特定**: 
- **既存コードの調査**: 
- **解決方針の決定**: 

### 2. 実装フェーズ
- **具体的な実装手順**: 
- **遭遇した問題と解決方法**: 
- **コードの変更詳細**: 

### 3. テスト・検証フェーズ
- **動作確認方法**: 
- **発生したエラーと対処**: 
- **最終的な動作確認結果**: 

## 技術的な学び
- **新しく学んだ技術・概念**: 
- **効果的だった解決アプローチ**: 
- **今後活用できる知識**: 

## 改善点・反省点
- **より効率的にできたであろう方法**: 
- **見落としていた点**: 
- **次回に活かすべき教訓**: 

## ${PROJECT_NAME}固有の学び
- **${TECH_STACK}関連の知見**: 
- **${TEAM_SIZE}チーム開発での気づき**: 
- **プロジェクト固有の制約・解決策**: 

---

**📝 実装完了日**: $(date +%Y年%m月%d日)  
**実装者**: [実装者名]  
**レビュー状況**: [レビュー状況]
EOF
