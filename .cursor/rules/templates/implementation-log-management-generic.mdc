---
description: "実装ログの作成・管理・蓄積に関するルール（履歴保持強化・追記基本方式・汎用版）"
globs: ["*.md", "IMPLEMENTATION_LOG*.md", "*_LOG*.md"]
alwaysApply: true
---

# 実装ログ管理ルール（汎用版）

## 📋 メタデータ
```yaml
title: "実装ログ管理ルール"
version: "3.0.0"
category: "process-management"
scope: "implementation-tracking"
enforcement: "automatic"
apply_to: "全プロジェクト対応"
```

## 🎯 **実装ログシステム概要**

### **目的**
- 開発プロセスの**透明性確保**と**知識蓄積**
- 実装課題の**早期発見**と**解決パターン集約**
- チーム学習の**加速**と**品質向上**
- **履歴保持による継続的学習基盤**の確立

### **適用範囲**
- 全ての実装・修正・機能追加作業
- バグ修正・性能改善・リファクタリング
- 設計変更・アーキテクチャ修正

---

## 📝 **履歴保持強化ルール（重要原則）**

### **基本方針: 追記を基本とする**
```yaml
記録保持原則:
  default_action: "追記（APPEND）"
  deletion_condition: "技術選定の根本的変更のみ"
  update_method: "既存内容保持 + 新規追記"
  
追記対象:
  - [ ] 要件の追加・拡張
  - [ ] 機能改善・バグ修正
  - [ ] パフォーマンス最適化
  - [ ] セキュリティ強化
  - [ ] UI/UX改善
  - [ ] API拡張
  - [ ] データ構造追加

削除許可条件（極めて限定的）:
  - [ ] **技術スタック変更**: React→Vue、MySQL→PostgreSQLなど
  - [ ] **アーキテクチャ根本変更**: モノリス→マイクロサービスなど
  - [ ] **プラットフォーム移行**: Web→Mobileアプリなど
  - [ ] **ビジネスモデル変更**: B2B→B2Cなど
```

### **履歴保持方法（具体的実装）**
```yaml
既存ログ保持フォーマット:
  section_header: "## 【PRESERVED】旧実装ログ (Version X.X.X)"
  preserved_content: "<!-- 完全な旧ログ内容をコメントアウト -->"
  metadata: "保持理由・日付・変更内容を明記"

新規ログ追記フォーマット:
  section_header: "## 【NEW】実装ログ追記 (Version Y.Y.Y)"
  incremental_content: "新規追加・変更内容のみ記述"
  reference_link: "既存実装ログとの関連性明記"

例:
---
## 【PRESERVED】旧実装ログ (Version 2.1.0)
<!-- 
保持理由: 基本アーキテクチャ継続のため保持
保持日: 2025-07-25
変更内容: システム改善による拡張

- 元々の基盤システム実装
- 初期のハードコーディング除去
- Version 2.0実装プロセス記録
-->

## 【NEW】実装ログ追記 (Version 3.0.0)
### 実装項目: 新機能追加
**開始時刻**: 14:30
**完了時刻**: 15:15
**所要時間**: 45分

関連: 旧実装ログの基盤を活用・拡張
```

---

## 🔄 **実装ログの2軸構成（更新版）**

### **Axis 1: フロー（Flow）- 日次実装ログ**
**目的**: その日の実装過程を時系列で記録  
**形式**: `IMPLEMENTATION_LOG_YYYY-MM-DD.md`  
**更新方法**: 
- **追記基本**: 同日の実装は同じファイルに時系列で追記
- **履歴保持**: 過去のログは保持セクションとして維持
- **バージョニング**: セマンティックバージョニングで管理

### **Axis 2: ストック（Stock）- 抽象化されたルール**
**目的**: 日々の学びを一般化してルールに昇華  
**形式**: `.cursorrules`ファイルやプロジェクトルールへの追加提案  
**プロセス**: 
- **累積学習**: 既存ルールを削除せず拡張・改良
- **知識蓄積**: 過去の学びと新しい学びを統合
- **継続進化**: ルールの段階的改善・最適化

---

## ⚡ **実装ログ作成の自動実行**

### **実装完了の判定基準**
```yaml
completion_triggers:
  technical_completion:
    - "一つの開発項目に対してエラーが完全になくなった状態"
    - "機能が期待通りに動作することが確認された場合"
    - "テストが全て通過した場合"
    
  user_confirmation:
    - "ユーザーから動作確認・承認が取れた場合"
    - "「動作確認できました」「問題ありません」等の承認表現"
    - "「完了しました」「OKです」等の完了確認"
    
  milestone_completion:
    - "開発項目が完全に完了した場合"
    - "Phase・Sprint の完了時"
    - "リリース・デプロイ完了時"
```

### **自動実行プロセス**
```yaml
execution_flow:
  step_1: "完了判定基準のトリガー検出"
  step_2: "フロー（日次ログ）の自動作成・更新"
  step_3: "ストック（ルール提案）の必要性判定"
  step_4: "学びがある場合のルール提案生成"
  step_5: "ユーザー承認後のルール追加"
```

---

## 📝 **フロー（日次実装ログ）構成**

### **基本構造**
```markdown
# 実装ログ - YYYY年MM月DD日

## 実装項目: [項目名]
**開始時刻**: HH:MM  
**完了時刻**: HH:MM  
**所要時間**: X時間Y分

### 実装概要
- 目的: [何を実装したか]
- 対象ファイル: [変更したファイル一覧]
- 主な変更内容: [変更の概要]

### 実装プロセス
1. **調査・分析フェーズ**
   - 問題の特定
   - 既存コードの調査
   - 解決方針の決定

2. **実装フェーズ**
   - 具体的な実装手順
   - 遭遇した問題と解決方法
   - コードの変更詳細

3. **テスト・検証フェーズ**
   - 動作確認方法
   - 発生したエラーと対処
   - 最終的な動作確認結果

### 技術的な学び
- 新しく学んだ技術・概念
- 効果的だった解決アプローチ
- 今後活用できる知識

### 改善点・反省点
- より効率的にできたであろう方法
- 見落としていた点
- 次回に活かすべき教訓
```

### **詳細記録項目**
```yaml
required_sections:
  implementation_context:
    - "実装の背景・目的"
    - "解決すべき課題・要件"
    - "成功基準・完了条件"
    
  technical_details:
    - "使用した技術・ライブラリ・ツール"
    - "アーキテクチャ・設計判断"
    - "実装アプローチ・パターン"
    
  process_record:
    - "調査・検討に要した時間"
    - "実装・テストに要した時間"
    - "レビュー・修正に要した時間"
    
  challenges_solutions:
    - "遭遇した技術的課題"
    - "採用した解決方法・代替案"
    - "参考にした情報源・資料"
    
  quality_assurance:
    - "実施したテスト・検証"
    - "確認した動作・出力"
    - "残存する課題・制限事項"
    
  learning_outcomes:
    - "新規習得した知識・スキル"
    - "既存知識の深化・応用"
    - "失敗・試行錯誤から得た教訓"
    
  future_improvements:
    - "コード品質・性能の改善機会"
    - "設計・アーキテクチャの改善案"
    - "プロセス・ツールの改善提案"
```

---

## 📚 **ストック（ルール提案）プロセス**

### **学びの抽象化基準**
```yaml
abstraction_criteria:
  reusability:
    - "他のプロジェクト・チームでも適用可能"
    - "技術スタック・ドメインに依存しない"
    - "一般的な開発課題への対応"
    
  effectiveness:
    - "実証された効果・改善結果"
    - "再現可能な手順・方法"
    - "測定可能な品質向上"
    
  significance:
    - "開発効率・品質への大きな影響"
    - "頻繁に遭遇する課題への対応"
    - "チーム全体で共有すべき知見"
```

### **ルール提案フォーマット**
```markdown
## 新しいルール提案

### 学びの背景
[今回の実装で得られた具体的な経験]

### 抽象化されたルール
[一般的な開発に適用可能な形に抽象化されたルール]

### 適用場面
[このルールが有効な場面・条件]

### 期待される効果
[このルールを適用することで得られる効果]

### 実装ガイドライン
[具体的な実装方法・手順]

### 検証方法
[ルール効果の測定・確認方法]
```

---

## 🔍 **品質保証・検証**

### **ログ品質チェックリスト**
```yaml
content_quality:
  completeness:
    - "全必須セクションの記載完了"
    - "技術詳細の十分な記述"
    - "課題・解決方法の明確化"
    
  accuracy:
    - "事実・手順の正確な記録"
    - "時間・工数の正確な計測"
    - "結果・効果の客観的評価"
    
  clarity:
    - "第三者が理解可能な記述"
    - "専門用語の適切な説明"
    - "論理的で構造化された記述"
    
  utility:
    - "今後の開発に活用可能"
    - "類似課題への応用可能"
    - "チーム学習への貢献"
```

### **継続的改善メトリクス**
```yaml
improvement_metrics:
  efficiency_gains:
    - "類似作業の実装時間短縮率"
    - "エラー・バグの発生頻度減少"
    - "コードレビューの効率向上"
    
  knowledge_sharing:
    - "チーム内での知識活用頻度"
    - "新メンバーのオンボーディング効率"
    - "ベストプラクティスの浸透度"
    
  quality_improvement:
    - "コード品質指標の向上"
    - "テストカバレッジの向上"
    - "技術的負債の削減"
```

---

## 🔄 **運用・管理**

### **定期レビュー・メンテナンス**
```yaml
review_schedule:
  daily: "実装ログの内容確認・補完"
  weekly: "学習成果の整理・共有"
  monthly: "ルール提案の効果測定"
  quarterly: "ログプロセスの改善・最適化"
```

### **チーム教育・浸透**
```yaml
education_program:
  onboarding:
    - "実装ログの目的・重要性説明"
    - "ログ作成方法・ツール使用方法"
    - "品質基準・期待レベル設定"
    
  continuous_learning:
    - "効果的なログ記述技法"
    - "学びの抽象化・一般化方法"
    - "チーム知識共有の促進"
    
  feedback_culture:
    - "ログレビュー・相互学習"
    - "改善提案・フィードバック"
    - "成功事例・失敗事例の共有"
```

---

*この汎用実装ログ管理ルールは、どのプロジェクトでも適用可能な設計となっており、チームの学習と成長を加速させ、継続的な品質向上を実現します。*
