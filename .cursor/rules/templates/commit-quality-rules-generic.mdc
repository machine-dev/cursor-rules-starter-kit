---
description: "Git コミット品質管理ルール（不要コード自動検出・クリーンアップ強化・汎用版）"
globs: ["*.git*", "*.ts", "*.tsx", "*.js", "*.jsx", "*.py", "*.java"]
alwaysApply: true
---

# Git コミット品質管理ルール（汎用版）

## 📋 メタデータ
```yaml
title: "Git コミット品質管理ルール"
version: "2.0.0"
category: "version-control"
scope: "code-quality"
apply_to: "全プロジェクト対応"
```

## 🔍 1. 変更ファイルの確認

### 1.1 ステータス確認
```bash
git status
```

### 1.2 変更内容の詳細確認
```bash
git diff
```

### 1.3 変更ファイルの分類
- **アプリケーション必須ファイル**: コミット対象
  - `src/` - アプリケーションコード
  - `components/` - UIコンポーネント
  - `lib/` - ライブラリ・ユーティリティ
  - `config/` - 設定ファイル
  - `package.json`, `tsconfig.json` - プロジェクト設定
  
- **除外対象ファイル**: `.gitignore`に追加
  - ドキュメント・ログファイル
  - 一時ファイル
  - 開発用ファイル

---

## 🚫 2. .gitignore への記載

### 2.1 ドキュメント・ログファイルの除外
```gitignore
# Implementation logs (日次作成されるログファイル)
IMPLEMENTATION_LOG*.md
*_LOG*.md
implementation-log*.md

# Documentation files (開発ドキュメント)
*_README.md
*_SPEC.md
*_PLAN.md
*_PRD.md
REQUIREMENTS_UPDATE*.md
TECHNICAL_IMPLEMENTATION_SPEC*.md

# Development files
*.mdc
data_query_canvas*.md

# Test data files
test_data*.csv
test_*.csv
*_test_data.csv

# Development scripts
test_*.js
debug_*.js
```

### 2.2 一時ファイル・開発用ファイルの除外
```gitignore
# Development temporary files
.DS_Store
.vscode/
.idea/
*.swp
*.swo
*~

# Logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Dependency directories
node_modules/
jspm_packages/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Build output
dist/
build/
out/

# IDE files
.vscode/
.idea/
```

---

## 📝 3. コミット・プッシュの実行

### 3.1 ステージング（必要なファイルのみ追加）
```bash
# 個別ファイル指定
git add src/components/Button.tsx
git add "src/pages/HomePage.tsx"
git add lib/utils/
git add config/

# または、パターンマッチング
git add src/ components/ lib/ config/ *.json *.ts *.tsx
```

### 3.2 コミットメッセージの作成
```bash
git commit -m "feat: 機能の簡潔な説明

- 主要な変更点1
  - 詳細な説明
  - 実装内容
  
- 主要な変更点2
  - 詳細な説明
  - 実装内容

- その他の改善
  - UI/UX改善
  - エラーハンドリング強化"
```

### 3.3 コミットメッセージの規約
#### プレフィックス
- `feat:` - 新機能追加
- `fix:` - バグ修正
- `refactor:` - リファクタリング
- `style:` - スタイル変更
- `docs:` - ドキュメント更新
- `test:` - テスト追加・修正
- `chore:` - その他の変更

#### 構造
```
<type>: <概要>

<詳細な説明>
- 変更点1
- 変更点2
- 変更点3
```

### 3.4 プッシュの実行
```bash
# リモートにプッシュ
git push origin main

# 強制プッシュ（注意して使用）
git push --force-with-lease origin main
```

---

## ⚠️ 4. 注意事項

### 4.1 コミット前チェックリスト
- [ ] 変更内容が意図した通りか確認
- [ ] 不要なファイルが含まれていないか確認
- [ ] `.gitignore`が適切に設定されているか確認
- [ ] コミットメッセージが分かりやすいか確認
- [ ] 機密情報が含まれていないか確認
- [ ] **不要コードチェック**: エラー検証用・テストコードが残っていないか確認
- [ ] **デバッグコードチェック**: console.log・debugger・開発用コメントが残っていないか確認
- [ ] **未使用インポートチェック**: 使用されていないimport文が残っていないか確認

### 4.1.1 不要コード詳細チェック（拡張）
```bash
# デバッグコード検出
grep -r "console\.log\|debugger\|TODO:\|FIXME:" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" .

# 未使用インポート検出（TypeScript/JavaScript）
npx eslint --fix . || echo "ESLint修正を実行"

# テストコード・検証コードの確認
find . -name "*.test.*" -o -name "*_test.*" -o -name "debug_*" | head -10

# 一時ファイル・バックアップファイルの確認
find . -name "*.backup*" -o -name "*.tmp" -o -name "*.bak" | head -10
```

#### **コミット前自動クリーンアップ（推奨）**
```bash
# 1. デバッグコード自動削除（注意：バックアップ推奨）
sed -i.bak '/console\.log/d' src/**/*.{ts,tsx,js,jsx} 2>/dev/null
sed -i.bak '/debugger/d' src/**/*.{ts,tsx,js,jsx} 2>/dev/null

# 2. 未使用インポート自動修正
npx eslint --fix . 2>/dev/null

# 3. TypeScript型チェック（TypeScriptプロジェクトの場合）
npx tsc --noEmit || echo "型エラーが存在します"

# 4. 確認
echo "✅ 不要コードクリーンアップ完了"
```

### 4.2 除外すべきファイルの判断基準
#### 🚫 除外対象
- 実装ログ・開発ドキュメント
- 一時的なテストファイル
- 開発者固有の設定ファイル
- 機密情報を含むファイル
- 自動生成されるファイル

#### ✅ 含める対象
- アプリケーションの動作に必要なコード
- 設定ファイル（公開可能なもの）
- データベーススキーマ・マイグレーション
- 依存関係の定義ファイル
- 本番環境で必要なファイル

### 4.3 緊急時の対応
#### 間違ったコミットの取り消し
```bash
# 最新のコミットを取り消し（変更は保持）
git reset --soft HEAD~1

# 最新のコミットを完全に取り消し
git reset --hard HEAD~1

# 特定のファイルのみ取り消し
git checkout HEAD~1 -- <filename>
```

#### 間違ったプッシュの対応
```bash
# プッシュ後の修正（注意：他の開発者に影響）
git revert <commit-hash>
git push origin main
```

---

## 📊 5. 実践ワークフロー例

### 5.1 通常の開発フロー
```bash
# 1. 現在の状態確認
git status
git diff

# 2. .gitignoreの更新（必要に応じて）
echo "IMPLEMENTATION_LOG*.md" >> .gitignore
git add .gitignore

# 3. 必要なファイルのみ追加
git add src/ components/ lib/
git add package.json tsconfig.json

# 4. コミット
git commit -m "feat: 新機能の実装

- 主要な変更内容
- 改善点
- 修正内容"

# 5. プッシュ
git push origin main
```

### 5.2 大規模変更時のフロー
```bash
# 1. ブランチ作成（推奨）
git checkout -b feature/new-feature

# 2. 段階的コミット
git add <specific-files>
git commit -m "feat: 基本機能の実装"

git add <more-files>
git commit -m "feat: UI改善の追加"

# 3. メインブランチにマージ
git checkout main
git merge feature/new-feature
git push origin main

# 4. ブランチ削除
git branch -d feature/new-feature
```

---

## 🔄 6. 定期メンテナンス

### 6.1 .gitignoreの見直し
- 月次で不要ファイルの確認
- 新しいファイルタイプの追加
- パターンの最適化

### 6.2 リポジトリのクリーンアップ
```bash
# 追跡されていないファイルの確認
git clean -n

# 追跡されていないファイルの削除
git clean -f

# .gitignoreされたファイルも削除
git clean -fx
```

### 6.3 履歴の確認
```bash
# 最近のコミット履歴
git log --oneline -10

# 特定ファイルの変更履歴
git log --follow <filename>

# 統計情報
git log --stat
```

---

## 📚 参考資料

### Git コマンドリファレンス
- [Git公式ドキュメント](https://git-scm.com/doc)
- [Conventional Commits](https://www.conventionalcommits.org/)
- [.gitignore テンプレート](https://github.com/github/gitignore)

### ベストプラクティス
- 小さく頻繁なコミット
- 分かりやすいコミットメッセージ
- 適切な.gitignoreの設定
- 機密情報の除外
- コードレビューの実施

---

*この汎用Git コミット品質管理ルールは、どのプロジェクトでも適用可能な設計となっており、コード品質の向上と継続的な開発プロセスの改善を実現します。*
